#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC2\PRGLIVINGROOM.ST'

; Global variables
#def  NumOfLightLivingRoom 5
#def  NumOfOutletLivingRoom 2
#def  NumOfCurtainLivingRoom 2
#def  NumOfMotionSensLivingRoom 1
#def  NumOfFCUsLivingRoom 0
#def  NumOfHMIsLivingRoom 2

; Global variables
#rem  aligned bool lightsStatusLivingRoom[24]
#rem  aligned bool outletsStatusLivingRoom[8]

#defpou PrgLivingRoom
  bool lightsSelect,
  bool socketsSelect,
  bool shuttersSelect,
  bool AC_Select,
  usint navSelect,
  TRemoteEthAdr RCU_ethAdr,
  TIPadr RCU_IP,  ;IP address
  uint RCU_Ch_localPort,
  bool Set_IP,
  bool GetAllStatus,
  bool SendIamServer,
  fbControlRoom controlRoom,
  TlightsOutputDevs lightsOutputDevs,
  ToutletOutputDevs outletOutputDevs,
  TcurtainsUpOutputDevs curtainsUpOutputDevs,
  TcurtainsDwOutputDevs curtainsDwOutputDevs,
  TMotionSensOutputDevs motionSensOutputDevs,
  aligned bool[24] EnLights,
  TEnLightsAN EnLightsAN,  ; 1:open  2:close 0:None
  aligned bool[8] EnOutlets,
  TEnOutletsAN EnOutletsAN,  ; 1:open  2:close 0:None
  aligned bool[8] EnCurtainsUp,
  aligned bool[8] EnCurtainsDw,
  R_TRIG[10] enLights_RT,
  F_TRIG[10] enLights_FT,
  R_TRIG[4] enOutlets_RT,
  F_TRIG[4] enOutlets_FT,
  R_TRIG[4] enCurtainsUP_RT,
  F_TRIG[4] enCurtainsUP_FT,
  R_TRIG[4] enCurtainsDW_RT,
  F_TRIG[4] enCurtainsDW_FT,
  R_TRIG[2] enCurtainsUP_SW_RT,
  F_TRIG[2] enCurtainsUP_SW_FT,
  R_TRIG[2] enCurtainsDW_SW_RT,
  F_TRIG[2] enCurtainsDW_SW_FT,
  aligned bool[8] enCurtainsUP_GUI,
  aligned bool[8] enCurtainsDW_GUI,
  usint CurtStatus_Index,
  usint CurtEn_Index,
  usint i,
  usint j,
  TP afterRestart_TP,
  F_TRIG afterRestart_TP_FT,
  aligned bool[8] motionSensStatus,
  aligned bool[8] CurtainsUpStatus,
  aligned bool[8] CurtainsDwStatus,
  usint HMI_Index,
  usint RCU_Index,
  usint[2] HMI_Addresses

 
#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC2\PRGLIVINGROOM.ST'
#pou PrgLivingRoom
#srcline 18 ;PROGRAM PrgLivingRoom
#table byte __Init___PrgLivingRoom_RCU_IP = 
    192,168,  0, 23;
#table byte __Init___PrgLivingRoom_lightsOutputDevs = 
      1,  1,  0,  1,  2,  0,  1,  3,  0,  1,  4,  0,  1,  5;
#table byte __Init___PrgLivingRoom_outletOutputDevs = 
      1,  6,  0,  1,  7;
#table byte __Init___PrgLivingRoom_curtainsUpOutputDevs = 
      2,  1,  0,  2,  3;
#table byte __Init___PrgLivingRoom_curtainsDwOutputDevs = 
      2,  2,  0,  2,  4;
#table byte __Init___PrgLivingRoom_motionSensOutputDevs = 
      1,  1;
#table byte __Init___PrgLivingRoom_enLights_FT = 
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgLivingRoom_enOutlets_FT = 
      4,  4,  4,  4;
#table byte __Init___PrgLivingRoom_enCurtainsUP_FT = 
      4,  4,  4,  4;
#table byte __Init___PrgLivingRoom_enCurtainsDW_FT = 
      4,  4,  4,  4;
#table byte __Init___PrgLivingRoom_enCurtainsUP_SW_FT = 
      4,  4;
#table byte __Init___PrgLivingRoom_enCurtainsDW_SW_FT = 
      4,  4;
#table byte __Init___PrgLivingRoom_HMI_Addresses = 
      3,  5;

#struct PrgLivingRoom__temp__
  usint P0__st__,
  usint P1__st__,
  usint P2__st__,
  usint P3__st__,
  usint P4__st__,
  usint P5__st__,
  usint P6__st__,
  usint P7__st__,
  udint P8__st__,
  udint P9__st__,
  usint P10__st__,
  usint P11__st__,
  udint P12__st__,
  udint P13__st__,
  usint P14__st__,
  usint P15__st__,
  udint P16__st__,
  udint P17__st__,
  udint P18__st__,
  udint P19__st__,
  udint P20__st__,
  udint P21__st__,
  udint P22__st__,
  udint P23__st__
P     61
PrgLivingRoom_L0:
 LINK __SizeOf(PrgLivingRoom__temp__)
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 131 ;   if navSelect = 0 then
 LDX  navSelect
#debug usint navSelect
 LD   usint 0
 EQ
 JMC  PrgLivingRoom_L1
#srcline 132 ;     lightsSelect   := 1;
 LD   bool -1      ; true
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 133 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 134 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 135 ;  elsif navSelect = 1 then
 JMP  PrgLivingRoom_L2
PrgLivingRoom_L1:
 LDX  navSelect
#debug usint navSelect
 LD   usint 1
 EQ
 JMC  PrgLivingRoom_L3
#srcline 136 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 137 ;     socketsSelect  := 1;
 LD   bool -1      ; true
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 138 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 139 ;  elsif navSelect = 2 then
 JMP  PrgLivingRoom_L2
PrgLivingRoom_L3:
 LDX  navSelect
#debug usint navSelect
 LD   usint 2
 EQ
 JMC  PrgLivingRoom_L4
#srcline 140 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 141 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 142 ;     shuttersSelect := 1;
 LD   bool -1      ; true
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 143 ;  end_if;
 JMP  PrgLivingRoom_L2
PrgLivingRoom_L4:
PrgLivingRoom_L2:
#srcline 145 ;  HMI_Index := 4;
 LD   usint 4
 WRX  HMI_Index
#debug_left usint HMI_Index
#srcline 146 ;  RCU_Index := 3;
 LD   usint 3
 WRX  RCU_Index
#debug_left usint RCU_Index
#srcline 147 ;  CurtStatus_Index := 10;
 LD   usint 10
 WRX  CurtStatus_Index
#debug_left usint CurtStatus_Index
#srcline 148 ;  CurtEn_Index  := 1;
 LD   usint 1
 WRX  CurtEn_Index
#debug_left usint CurtEn_Index
#srcline 149 ;  
#srcline 150 ;  
#srcline 151 ;  if GetRemoteIPaddress(chanCode := Eth1_uni2, ethAdr := RCU_ethAdr) then
 NXT
 LD   uint 10209
 WR   __Instance__GetRemoteIPaddress~chanCode
#debug_left uint __Instance__GetRemoteIPaddress~chanCode
 LEAX RCU_ethAdr
 WR   __Instance__GetRemoteIPaddress~ethAdr
#debug_left pointer __Instance__GetRemoteIPaddress.ethAdr
 PRV
 LEA  __Instance__GetRemoteIPaddress
 CAL  GetRemoteIPaddress_L0
 JMC  PrgLivingRoom_L5
#srcline 152 ;     RCUs_IPs[RCU_Index] := RCU_ethAdr.remoteIP;
 LEAX RCU_ethAdr~remoteIP
#debug pointer RCU_ethAdr.remoteIP
 SRC  %IB0
 LEA  RCUs_IPs
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 6   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer RCUs_IPs[RCU_Index]
 LD   4   ;SizeOf() 
 MOV  %IB0
#srcline 153 ;  end_if;
PrgLivingRoom_L5:
#srcline 157 ;  HMIs_Info[HMI_Index].SNo := HMI_Addresses[1];
 LDX  HMI_Addresses[0]
#debug usint HMI_Addresses[1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index].SNo
#srcline 158 ;  HMIs_Info[HMI_Index].readStAdd  := 391;
 LD   uint 391
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readStAdd
#srcline 159 ;  HMIs_Info[HMI_Index].writeStAdd := 451;
 LD   uint 451
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  3  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeStAdd
#srcline 160 ;  HMIs_Info[HMI_Index].readNoPoint  := SIZEOF(HMIs_DataRead[HMI_Index]) / 2;
 LD   104  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  5  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readNoPoint
#srcline 161 ;  HMIs_Info[HMI_Index].writeNoPoint := SIZEOF(HMIs_DataWrite[HMI_Index]) / 2;
 LD   142  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  7  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeNoPoint
#srcline 163 ;  for i := 1 to NumOfHMIsLivingRoom-1 do
 LD   usint 1
 WRX  i
 LD   usint 2
 LD   usint 1
 SUB
 AND  $FF
 WRY  P0__st__
PrgLivingRoom_L7:
 LDX  i
 LDY  P0__st__
 GT   
 JMD  PrgLivingRoom_L8
 DBG  
#srcline 164 ;    HMIs_Info[HMI_Index+i] := HMIs_Info[HMI_Index];
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_Info[HMI_Index]
 SRC  %IB0
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_Info[HMI_Index+i]
 LD   9   ;SizeOf() 
 MOV  %IB0
#srcline 165 ;    HMIs_Info[HMI_Index+i].SNo := HMI_Addresses[i+1];
 LEAX HMI_Addresses
 LDX  i
#debug usint i
 LD   usint 1
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDI  
#debug usint HMI_Addresses[i+1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index+i].SNo
#srcline 166 ;  end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L7
PrgLivingRoom_L8:
 NOP  -1
#srcline 169 ;  afterRestart_TP(IN := IS_COLD_RESTART_PLC or IS_HOT_RESTART_PLC, PT := T#2s );
 LD   bool IS_COLD_RESTART_PLC
#debug bool IS_COLD_RESTART_PLC
 LD   bool IS_HOT_RESTART_PLC
#debug bool IS_HOT_RESTART_PLC
 OR  
 WRX  afterRestart_TP~IN
#debug_left bool afterRestart_TP~IN
 LD   time 2000
 WRX  afterRestart_TP~PT
#debug_left time afterRestart_TP~PT
 LEAX afterRestart_TP
 CAL  TP_L0
#srcline 170 ;  afterRestart_TP_FT(CLK := afterRestart_TP.Q);
 LDX  afterRestart_TP~Q
#debug bool afterRestart_TP.Q
 WRX  afterRestart_TP_FT~CLK
#debug_left bool afterRestart_TP_FT~CLK
 LEAX afterRestart_TP_FT
 CAL  F_TRIG_L0
#srcline 172 ;  if afterRestart_TP_FT.Q then
 LDX  afterRestart_TP_FT~Q
#debug bool afterRestart_TP_FT.Q
 JMC  PrgLivingRoom_L9
#srcline 173 ;     SendIamServer := 1;
 LD   bool -1      ; true
 WRX  SendIamServer
#debug_left bool SendIamServer
#srcline 174 ;  end_if;
PrgLivingRoom_L9:
#srcline 176 ;  controlRoom(RCU_ChCode := ETH1_uni2 , RCU_PingDone := RCUs_PingDone[RCU_Index],
 LD   uint 10209
 WRX  controlRoom~RCU_ChCode
#debug_left uint controlRoom~RCU_ChCode
 LEA  RCUs_PingDone
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 6   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool RCUs_PingDone[RCU_Index]
 WRX  controlRoom~RCU_PingDone
#debug_left bool controlRoom~RCU_PingDone
#srcline 177 ;              numOfLights := NumOfLightLivingRoom , numOfOutlets := NumOfOutletLivingRoom , numOfCurtains := NumOfCurtainLivingRoom, numOfMotionSens := NumOfMotionSensLivingRoom,
 LD   usint 5
 WRX  controlRoom~numOfLights
#debug_left usint controlRoom~numOfLights
 LD   usint 2
 WRX  controlRoom~numOfOutlets
#debug_left usint controlRoom~numOfOutlets
 LD   usint 2
 WRX  controlRoom~numOfCurtains
#debug_left usint controlRoom~numOfCurtains
 LD   usint 1
 WRX  controlRoom~numOfMotionSens
#debug_left usint controlRoom~numOfMotionSens
#srcline 178 ;              lightsOutputDevs := lightsOutputDevs , outletOutputDevs := outletOutputDevs ,
 LEAX lightsOutputDevs
#debug pointer lightsOutputDevs
 SRC  %IB0
 LEAX controlRoom~lightsOutputDevs
 LD   51   ;SizeOf() 
 MOV  %IB0
 LEAX outletOutputDevs
#debug pointer outletOutputDevs
 SRC  %IB0
 LEAX controlRoom~outletOutputDevs
 LD   24   ;SizeOf() 
 MOV  %IB0
#srcline 179 ;              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
 LEAX curtainsUpOutputDevs
#debug pointer curtainsUpOutputDevs
 SRC  %IB0
 LEAX controlRoom~curtainsUpOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
 LEAX curtainsDwOutputDevs
#debug pointer curtainsDwOutputDevs
 SRC  %IB0
 LEAX controlRoom~curtainsDwOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
#srcline 180 ;              RCU_CH_IN := void(ETH1_uni2_IN) , LightsStatus := lightsStatusLivingRoom ,OutletsStatus := outletsStatusLivingRoom, MotionSenStatus := motionSensStatus,
 LEA  ETH1_uni2_IN
 WRX  controlRoom~RCU_CH_IN
#debug_left pointer controlRoom.RCU_CH_IN
 LEA  lightsStatusLivingRoom
 WRX  controlRoom~LightsStatus
#debug_left pointer controlRoom.LightsStatus
 LEA  outletsStatusLivingRoom
 WRX  controlRoom~OutletsStatus
#debug_left pointer controlRoom.OutletsStatus
 LEAX motionSensStatus
 WRX  controlRoom~MotionSenStatus
#debug_left pointer controlRoom.MotionSenStatus
#srcline 181 ;              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := EnOutlets ,EnOutletsAN :=EnOutletsAN ,
 LEAX EnLights
 WRX  controlRoom~EnLights
#debug_left pointer controlRoom.EnLights
 LEAX EnLightsAN
 WRX  controlRoom~EnLightsAN
#debug_left pointer controlRoom.EnLightsAN
 LEAX EnOutlets
 WRX  controlRoom~EnOutlets
#debug_left pointer controlRoom.EnOutlets
 LEAX EnOutletsAN
 WRX  controlRoom~EnOutletsAN
#debug_left pointer controlRoom.EnOutletsAN
#srcline 182 ;              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus);
 LEAX SendIamServer
 WRX  controlRoom~SendIamServer
#debug_left pointer controlRoom.SendIamServer
 LEAX GetAllStatus
 WRX  controlRoom~GetAllStatus
#debug_left pointer controlRoom.GetAllStatus
 LEAX controlRoom
 CAL  fbControlRoom_L0
#srcline 184 ;              //stLightsLivingRoomAN := lightsStatusLivingRoom[1];
#srcline 187 ;  (* FCU[1](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_LivingRoom[1], temp := FCU_Temp_LivingRoom, valve := FCU_valve_LivingRoom, fanLow := FCU_fanLow_LivingRoom,
#srcline 188 ;                 fanMed := FCU_fanMed_LivingRoom, fanHigh := FCU_fanHigh_LivingRoom);  *)
#srcline 193 ;   for i := 1 to NumOfLightLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 5
 WRY  P1__st__
PrgLivingRoom_L11:
 LDX  i
 LDY  P1__st__
 GT   
 JMD  PrgLivingRoom_L12
 DBG  
#srcline 194 ;       HMIs_DataWrite[HMI_Index].lightsStatus[i] := BOOL_TO_WORD(lightsStatusLivingRoom[i]);
 LEA  lightsStatusLivingRoom
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool lightsStatusLivingRoom[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].lightsStatus[i]
#srcline 195 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L11
PrgLivingRoom_L12:
 NOP  -1
#srcline 197 ;   for i := 1 to NumOfOutletLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P2__st__
PrgLivingRoom_L13:
 LDX  i
 LDY  P2__st__
 GT   
 JMD  PrgLivingRoom_L14
 DBG  
#srcline 198 ;       HMIs_DataWrite[HMI_Index].outletsStatus[i] := BOOL_TO_WORD(outletsStatusLivingRoom[i]);
 LEA  outletsStatusLivingRoom
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool outletsStatusLivingRoom[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].outletsStatus[i]
#srcline 199 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L13
PrgLivingRoom_L14:
 NOP  -1
#srcline 201 ;   for i := 1 to NumOfMotionSensLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P3__st__
PrgLivingRoom_L15:
 LDX  i
 LDY  P3__st__
 GT   
 JMD  PrgLivingRoom_L16
 DBG  
#srcline 202 ;       HMIs_DataWrite[HMI_Index].motionSensStatus[i] := BOOL_TO_WORD(motionSensStatus[i]);
 LEAX motionSensStatus
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool motionSensStatus[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].motionSensStatus[i]
#srcline 203 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L15
PrgLivingRoom_L16:
 NOP  -1
#srcline 205 ;  (* for i := 1 to NumOfFCUsLivingRoom do
#srcline 206 ;      HMIs_DataWrite[HMI_Index].FCUs_Status[i] := FCU[i].FCU_Status;
#srcline 207 ;   end_for; *)
#srcline 208 ;   
#srcline 209 ;   if NumOfCurtainLivingRoom > 0 then
 LD   usint 2
 LD   usint 0
 GT
 JMC  PrgLivingRoom_L17
#srcline 210 ;      for i := 1 to NumOfCurtainLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P4__st__
PrgLivingRoom_L19:
 LDX  i
 LDY  P4__st__
 GT   
 JMD  PrgLivingRoom_L20
 DBG  
#srcline 211 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].UP.0 := curtainsStatus[CurtStatus_Index - 1 + i].outUP;
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool HMIs_DataWrite[HMI_Index].shuttersStatus[i].UP.0
#srcline 212 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].Dw.0 := curtainsStatus[CurtStatus_Index - 1 + i].outDW;
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool HMIs_DataWrite[HMI_Index].shuttersStatus[i].Dw.0
#srcline 213 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].pos  := USINT_TO_WORD(curtainsStatus[CurtStatus_Index - 1 + i].normPos);
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 LDI  
#debug usint curtainsStatus[CurtStatus_Index-1+i].normPos
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 ADD  4  ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].shuttersStatus[i].pos
#srcline 214 ;      end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L19
PrgLivingRoom_L20:
 NOP  -1
#srcline 215 ;   end_if;
PrgLivingRoom_L17:
#srcline 217 ;   for i := 1 to NumOfHMIsLivingRoom-1 do
 LD   usint 1
 WRX  i
 LD   usint 2
 LD   usint 1
 SUB
 AND  $FF
 WRY  P5__st__
PrgLivingRoom_L21:
 LDX  i
 LDY  P5__st__
 GT   
 JMD  PrgLivingRoom_L22
 DBG  
#srcline 218 ;     HMIs_DataWrite[HMI_Index+i] := HMIs_DataWrite[HMI_Index];
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_DataWrite[HMI_Index]
 SRC  %IB0
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_DataWrite[HMI_Index+i]
 LD   142   ;SizeOf() 
 MOV  %IB0
#srcline 219 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L21
PrgLivingRoom_L22:
 NOP  -1
#srcline 222 ;   for j := 1 to NumOfHMIsLivingRoom do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P6__st__
PrgLivingRoom_L23:
 LDX  j
 LDY  P6__st__
 GT   
 JMD  PrgLivingRoom_L24
 DBG  
#srcline 223 ;     for i := 1 to NumOfLightLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 5
 WRY  P7__st__
PrgLivingRoom_L25:
 LDX  i
 LDY  P7__st__
 GT   
 JMD  PrgLivingRoom_L26
 DBG  
#srcline 225 ;         enLights_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P8__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P8__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P8__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 227 ;         enLights_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P9__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P9__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P9__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 229 ;         if enLights_RT[j,i].Q or enLights_FT[j,i].Q then
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_RT[j,i].Q
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_FT[j,i].Q
 OR  
 JMC  PrgLivingRoom_L27
#srcline 230 ;            EnLights[i] := 1;
 LD   bool -1      ; true
 LEAX EnLights
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnLights[i]
#srcline 231 ;         end_if;
PrgLivingRoom_L27:
#srcline 232 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L25
PrgLivingRoom_L26:
 NOP  -1
#srcline 233 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgLivingRoom_L23
PrgLivingRoom_L24:
 NOP  -1
#srcline 235 ;   for j := 1 to NumOfHMIsLivingRoom do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P10__st__
PrgLivingRoom_L29:
 LDX  j
 LDY  P10__st__
 GT   
 JMD  PrgLivingRoom_L30
 DBG  
#srcline 236 ;     for i := 1 to NumOfOutletLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P11__st__
PrgLivingRoom_L31:
 LDX  i
 LDY  P11__st__
 GT   
 JMD  PrgLivingRoom_L32
 DBG  
#srcline 238 ;         enOutlets_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P12__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P12__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P12__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 240 ;         enOutlets_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P13__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P13__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P13__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 242 ;         if enOutlets_RT[j,i].Q or enOutlets_FT[j,i].Q then
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_RT[j,i].Q
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_FT[j,i].Q
 OR  
 JMC  PrgLivingRoom_L33
#srcline 243 ;            EnOutlets[i] := 1;
 LD   bool -1      ; true
 LEAX EnOutlets
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnOutlets[i]
#srcline 244 ;         end_if;
PrgLivingRoom_L33:
#srcline 245 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L31
PrgLivingRoom_L32:
 NOP  -1
#srcline 246 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgLivingRoom_L29
PrgLivingRoom_L30:
 NOP  -1
#srcline 248 ;   
#srcline 249 ;   for j := 1 to NumOfHMIsLivingRoom do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P14__st__
PrgLivingRoom_L35:
 LDX  j
 LDY  P14__st__
 GT   
 JMD  PrgLivingRoom_L36
 DBG  
#srcline 250 ;     for i := 1 to NumOfCurtainLivingRoom do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P15__st__
PrgLivingRoom_L37:
 LDX  i
 LDY  P15__st__
 GT   
 JMD  PrgLivingRoom_L38
 DBG  
#srcline 252 ;         enCurtainsUP_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P16__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P16__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P16__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 254 ;         enCurtainsUP_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P17__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P17__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P17__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 256 ;         enCurtainsDW_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P18__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P18__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P18__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 258 ;         enCurtainsDW_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P19__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 10   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P19__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P19__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 260 ;         //
#srcline 261 ;         enCurtainsUP_SW_RT[i](CLK := controlRoom.SwitchUPStatus[i]);
 LEAX enCurtainsUP_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRY  P20__st__  ; offset instance
 LEAX controlRoom
 ADD  418  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchUPStatus[i]
 LDY  P20__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P20__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 262 ;         enCurtainsUP_SW_FT[i](CLK := controlRoom.SwitchUPStatus[i]);
 LEAX enCurtainsUP_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRY  P21__st__  ; offset instance
 LEAX controlRoom
 ADD  418  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchUPStatus[i]
 LDY  P21__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P21__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 264 ;         enCurtainsDW_SW_RT[i](CLK := controlRoom.SwitchDWStatus[i]);
 LEAX enCurtainsDW_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRY  P22__st__  ; offset instance
 LEAX controlRoom
 ADD  419  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchDWStatus[i]
 LDY  P22__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P22__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 265 ;         enCurtainsDW_SW_FT[i](CLK := controlRoom.SwitchDWStatus[i]);
 LEAX enCurtainsDW_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRY  P23__st__  ; offset instance
 LEAX controlRoom
 ADD  419  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchDWStatus[i]
 LDY  P23__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P23__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 267 ;         if  enCurtainsUP_RT[j,i].Q  or enCurtainsUP_FT[j,i].Q then
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_RT[j,i].Q
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_FT[j,i].Q
 OR  
 JMC  PrgLivingRoom_L39
#srcline 268 ;             enCurtainsUP_GUI[i] := 1;
 LD   bool -1      ; true
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 269 ;         end_if;
PrgLivingRoom_L39:
#srcline 271 ;         if  enCurtainsDW_RT[j,i].Q  or enCurtainsDW_FT[j,i].Q then
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_RT[j,i].Q
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_FT[j,i].Q
 OR  
 JMC  PrgLivingRoom_L41
#srcline 272 ;             enCurtainsDW_GUI[i] := 1;
 LD   bool -1      ; true
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 273 ;         end_if;
PrgLivingRoom_L41:
#srcline 275 ;         // if up button is pressed and the curtain is not moving up
#srcline 277 ;         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outUP then
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsUP_GUI[i]
 LEAX enCurtainsUP_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_SW_RT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 NEG
 AND
 JMC  PrgLivingRoom_L43
#srcline 278 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].UP   := 1;
 LD   bool -1      ; true
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].UP
#srcline 279 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].DW
#srcline 280 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 282 ;             enCurtainsUP_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 283 ;         end_if;
PrgLivingRoom_L43:
#srcline 285 ;         // if up button is pressed and the curtain is moving up
#srcline 287 ;         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outUP then
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsUP_GUI[i]
 LEAX enCurtainsUP_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_SW_FT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 AND
 JMC  PrgLivingRoom_L45
#srcline 288 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].UP
#srcline 289 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].DW
#srcline 290 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;
 LD   bool -1      ; true
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 292 ;             enCurtainsUP_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 293 ;         end_if;
PrgLivingRoom_L45:
#srcline 296 ;          // if down button is pressed and the curtain is not moving down
#srcline 298 ;         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outDW then
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsDW_GUI[i]
 LEAX enCurtainsDW_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_SW_RT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 NEG
 AND
 JMC  PrgLivingRoom_L47
#srcline 299 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].UP
#srcline 300 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].DW   := 1;
 LD   bool -1      ; true
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].DW
#srcline 301 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 303 ;             enCurtainsDW_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 304 ;         end_if;
PrgLivingRoom_L47:
#srcline 306 ;         // if down button is pressed and the curtain is moving down
#srcline 308 ;         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outDW then
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsDW_GUI[i]
 LEAX enCurtainsDW_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_SW_FT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 AND
 JMC  PrgLivingRoom_L49
#srcline 309 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].UP
#srcline 310 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].DW
#srcline 311 ;             PLC2_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;
 LD   bool -1      ; true
 LEA  PLC2_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC2_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 313 ;             enCurtainsDW_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 314 ;         end_if;
PrgLivingRoom_L49:
#srcline 316 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgLivingRoom_L37
PrgLivingRoom_L38:
 NOP  -1
#srcline 317 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgLivingRoom_L35
PrgLivingRoom_L36:
 NOP  -1
#srcline 319 ;   (*
#srcline 320 ;   for j := 1 to NumOfHMIsLivingRoom do
#srcline 321 ;      for i := 1 to NumOfFCUsLivingRoom do
#srcline 322 ;          enFCUs_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
#srcline 323 ;          enFCUs_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
#srcline 325 ;          if enFCUs_FT[j,i].Q then
#srcline 326 ;             enableFCU[i] := 0;
#srcline 327 ;          end_if;
#srcline 328 ;          if enFCUs_RT[j,i].Q then
#srcline 329 ;             enableFCU[i] := 1;
#srcline 330 ;          end_if;
#srcline 332 ;          enFanAuto_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed = 8));
#srcline 333 ;          enFanLow_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.0);
#srcline 334 ;          enFanMed_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.1);
#srcline 335 ;          enFanHigh_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.2);
#srcline 337 ;          if enFanAuto_RT[j,i].Q then
#srcline 338 ;             settingsFCU[i].FCU_FanSpeed := auto;
#srcline 339 ;          end_if;
#srcline 340 ;          if enFanLow_RT[j,i].Q then
#srcline 341 ;             settingsFCU[i].FCU_FanSpeed := low;
#srcline 342 ;          end_if;
#srcline 343 ;          if enFanMed_RT[j,i].Q then
#srcline 344 ;             settingsFCU[i].FCU_FanSpeed := med;
#srcline 345 ;          end_if;
#srcline 346 ;          if enFanHigh_RT[j,i].Q then
#srcline 347 ;             settingsFCU[i].FCU_FanSpeed := high;
#srcline 348 ;          end_if;
#srcline 350 ;          enFCUCool_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode = 0));
#srcline 351 ;          enFCUFanOnly_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode.0);
#srcline 353 ;          if enFCUCool_RT[j,i].Q then
#srcline 354 ;             settingsFCU[i].FCU_Mode := cooling;
#srcline 355 ;          end_if;
#srcline 356 ;          if enFCUFanOnly_RT[j,i].Q then
#srcline 357 ;             settingsFCU[i].FCU_Mode := fanOnly;
#srcline 358 ;          end_if;
#srcline 360 ;          enSetTempIncr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
#srcline 361 ;          enSetTempIncr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
#srcline 363 ;          if enSetTempIncr_RT[j,i].Q or enSetTempIncr_FT[j,i].Q then
#srcline 364 ;             setTempFCU_LivingRoom[j] := setTempFCU_LivingRoom[j] + 0.5;
#srcline 365 ;          end_if;
#srcline 367 ;          enSetTempDecr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
#srcline 368 ;          enSetTempDecr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
#srcline 370 ;          if enSetTempDecr_RT[j,i].Q or enSetTempDecr_FT[j,i].Q then
#srcline 371 ;             setTempFCU_LivingRoom[j] := setTempFCU_LivingRoom[j] - 0.5;
#srcline 372 ;          end_if;
#srcline 374 ;      end_for;
#srcline 375 ;   end_for; *)
#srcline 377 ;END_PROGRAM
 ULNK
RET
E     61

; Initialize - variables
P     61
PrgLivingRoom__InstanceInit__:
 LINK 0
 LD   0
 SRC  byte __Init___PrgLivingRoom_RCU_IP
 LEAX byte RCU_IP
 LD   4
 MOV  %X0
 LEAX controlRoom
 CAL  fbControlRoom__InstanceInit__
 LD   0
 SRC  byte __Init___PrgLivingRoom_lightsOutputDevs
 LEAX byte lightsOutputDevs
 LD   51
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_outletOutputDevs
 LEAX byte outletOutputDevs
 LD   24
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_curtainsUpOutputDevs
 LEAX byte curtainsUpOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_curtainsDwOutputDevs
 LEAX byte curtainsDwOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_motionSensOutputDevs
 LEAX byte motionSensOutputDevs
 LD   12
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enLights_FT
 LEAX byte enLights_FT[0]
 LD   10
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enOutlets_FT
 LEAX byte enOutlets_FT[0]
 LD   4
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enCurtainsUP_FT
 LEAX byte enCurtainsUP_FT[0]
 LD   4
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enCurtainsDW_FT
 LEAX byte enCurtainsDW_FT[0]
 LD   4
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enCurtainsUP_SW_FT
 LEAX byte enCurtainsUP_SW_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgLivingRoom_enCurtainsDW_SW_FT
 LEAX byte enCurtainsDW_SW_FT[0]
 LD   2
 MOV  %X0
 LEAX afterRestart_TP_FT
 CAL  F_TRIG__InstanceInit__
 LD   0
 SRC  byte __Init___PrgLivingRoom_HMI_Addresses
 LEAX byte HMI_Addresses[0]
 LD   2
 MOV  %X0
 ULNK
RET
E     61
; End initialize - variables
#endpou 



 

#srcfile ''
