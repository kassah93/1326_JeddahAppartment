#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC1\PRGMAJLES.ST'

; Global variables
#def  NumOfLightMajles 15
#def  NumOfOutletMajles 1
#def  NumOfCurtainMajles 5
#def  NumOfMotionSensMajles 1
#def  NumOfFCUsMajles 2
#def  NumOfHMIsMajles 4

; Global variables
#rem  aligned bool lightsStatusMajles[24]
#rem  aligned bool outletsStatusMajles[8]
#rem  real setTempFCU_Majles[2]

#defpou PrgMajles
  bool lightsSelect,
  bool socketsSelect,
  bool shuttersSelect,
  bool AC_Select,
  usint navSelect,
  TRemoteEthAdr RCU1_ethAdr,
  TRemoteEthAdr RCU2_ethAdr,
  TIPadr RCU_IP,  ;IP address
  uint RCU_Ch_localPort,
  bool Set_IP,
  bool GetAllStatus,
  bool SendIamServer,
  fbControlRoom controlRoomRCU1,
  fbControlRoom controlRoomRCU2,
  TlightsOutputDevs lightsOutputDevs,
  ToutletOutputDevs outletOutputDevsRCU1,
  ToutletOutputDevs outletOutputDevsRCU2,
  TcurtainsUpOutputDevs curtainsUpOutputDevs,
  TcurtainsDwOutputDevs curtainsDwOutputDevs,
  TMotionSensOutputDevs motionSensOutputDevs,
  aligned bool[24] EnLights,
  TEnLightsAN EnLightsAN,  ; 1:open  2:close 0:None
  aligned bool[8] EnOutlets,
  TEnOutletsAN EnOutletsAN,  ; 1:open  2:close 0:None
  aligned bool[8] EnCurtainsUp,
  aligned bool[8] EnCurtainsDw,
  R_TRIG[60] enLights_RT,
  F_TRIG[60] enLights_FT,
  R_TRIG[4] enOutlets_RT,
  F_TRIG[4] enOutlets_FT,
  R_TRIG[20] enCurtainsUP_RT,
  F_TRIG[20] enCurtainsUP_FT,
  R_TRIG[20] enCurtainsDW_RT,
  F_TRIG[20] enCurtainsDW_FT,
  usint i,
  usint j,
  TP afterRestart_TP,
  F_TRIG afterRestart_TP_FT,
  aligned bool[8] motionSensStatus,
  aligned bool[8] CurtainsUpStatus,
  aligned bool[8] CurtainsDwStatus,
  fbControlFCU[2] FCU,
  aligned bool[8] enableFCU,
  TFCU_Settings[2] settingsFCU,
  F_TRIG[8] enFCUs_FT,
  R_TRIG[8] enFCUs_RT,
  R_TRIG[8] enFanHigh_RT,
  R_TRIG[8] enFanMed_RT,
  R_TRIG[8] enFanLow_RT,
  R_TRIG[8] enFanAuto_RT,
  R_TRIG[8] enFCUCool_RT,
  R_TRIG[8] enFCUFanOnly_RT,
  R_TRIG[8] enSetTempIncr_RT,
  F_TRIG[8] enSetTempIncr_FT,
  R_TRIG[8] enSetTempDecr_RT,
  F_TRIG[8] enSetTempDecr_FT,
  usint HMI_Index,
  usint RCU_Index,
  usint[4] HMI_Addresses

#table byte __Init____setTempFCU_Majles = 
      0,  0,160, 65,  0,  0,160, 65;
 
#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC1\PRGMAJLES.ST'
#pou PrgMajles
#srcline 18 ;PROGRAM PrgMajles
#table byte __Init___PrgMajles_RCU_IP = 
    192,168,  0, 23;
#table byte __Init___PrgMajles_lightsOutputDevs = 
      1,  1,  0,  1,  2,  0,  1,  3,  0,  1,  4,  0,  1,  5,  0,  1,  6,  0,  1,  7,  0,
      1,  8,  0,  1,  9,  0,  1, 10,  0,  2,  1,  0,  2,  2,  0,  2,  3,  0,  2,  4,
      0,  2,  5;
#table byte __Init___PrgMajles_outletOutputDevsRCU1 = 
      2,  6;
#table byte __Init___PrgMajles_outletOutputDevsRCU2 = 
      0,  0;
#table byte __Init___PrgMajles_curtainsUpOutputDevs = 
      1,  2,  0,  1,  4,  0,  1,  6,  0,  1,  8,  0,  2,  1;
#table byte __Init___PrgMajles_curtainsDwOutputDevs = 
      1,  3,  0,  1,  5,  0,  1,  7,  0,  1,  9,  0,  2,  2;
#table byte __Init___PrgMajles_motionSensOutputDevs = 
      1,  1;
#table byte __Init___PrgMajles_enLights_FT = 
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_enOutlets_FT = 
      4,  4,  4,  4;
#table byte __Init___PrgMajles_enCurtainsUP_FT = 
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_enCurtainsDW_FT = 
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_enFCUs_FT = 
      4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_enSetTempIncr_FT = 
      4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_enSetTempDecr_FT = 
      4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgMajles_HMI_Addresses = 
     12, 13, 14, 15;

#struct PrgMajles__temp__
  usint P0__st__,
  usint P1__st__,
  usint P2__st__,
  usint P3__st__,
  usint P4__st__,
  usint P5__st__,
  usint P6__st__,
  usint P7__st__,
  udint P8__st__,
  udint P9__st__,
  usint P10__st__,
  usint P11__st__,
  udint P12__st__,
  udint P13__st__,
  usint P14__st__,
  usint P15__st__,
  udint P16__st__,
  udint P17__st__,
  udint P18__st__,
  udint P19__st__,
  usint P20__st__,
  usint P21__st__,
  udint P22__st__,
  udint P23__st__,
  udint P24__st__,
  udint P25__st__,
  udint P26__st__,
  udint P27__st__,
  udint P28__st__,
  udint P29__st__,
  udint P30__st__,
  udint P31__st__,
  udint P32__st__,
  udint P33__st__
P     61
PrgMajles_L0:
 LINK __SizeOf(PrgMajles__temp__)
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 130 ;   if navSelect = 0 then
 LDX  navSelect
#debug usint navSelect
 LD   usint 0
 EQ
 JMC  PrgMajles_L1
#srcline 131 ;     lightsSelect   := 1;
 LD   bool -1      ; true
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 132 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 133 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 134 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 135 ;  elsif navSelect = 1 then
 JMP  PrgMajles_L2
PrgMajles_L1:
 LDX  navSelect
#debug usint navSelect
 LD   usint 1
 EQ
 JMC  PrgMajles_L3
#srcline 136 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 137 ;     socketsSelect  := 1;
 LD   bool -1      ; true
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 138 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 139 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 140 ;  elsif navSelect = 2 then
 JMP  PrgMajles_L2
PrgMajles_L3:
 LDX  navSelect
#debug usint navSelect
 LD   usint 2
 EQ
 JMC  PrgMajles_L4
#srcline 141 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 142 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 143 ;     shuttersSelect := 1;
 LD   bool -1      ; true
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 144 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 145 ;  elsif navSelect = 3 then
 JMP  PrgMajles_L2
PrgMajles_L4:
 LDX  navSelect
#debug usint navSelect
 LD   usint 3
 EQ
 JMC  PrgMajles_L5
#srcline 146 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 147 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 148 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 149 ;     AC_Select      := 1;
 LD   bool -1      ; true
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 150 ;  end_if;
 JMP  PrgMajles_L2
PrgMajles_L5:
PrgMajles_L2:
#srcline 152 ;   HMI_Index := 1;
 LD   usint 1
 WRX  HMI_Index
#debug_left usint HMI_Index
#srcline 153 ;   RCU_Index := 1;
 LD   usint 1
 WRX  RCU_Index
#debug_left usint RCU_Index
#srcline 155 ;   if GetRemoteIPaddress(chanCode := Eth1_uni0, ethAdr := RCU1_ethAdr) then
 NXT
 LD   uint 2017
 WR   __Instance__GetRemoteIPaddress~chanCode
#debug_left uint __Instance__GetRemoteIPaddress~chanCode
 LEAX RCU1_ethAdr
 WR   __Instance__GetRemoteIPaddress~ethAdr
#debug_left pointer __Instance__GetRemoteIPaddress.ethAdr
 PRV
 LEA  __Instance__GetRemoteIPaddress
 CAL  GetRemoteIPaddress_L0
 JMC  PrgMajles_L6
#srcline 156 ;     RCUs_IPs[RCU_Index] := RCU1_ethAdr.remoteIP;
 LEAX RCU1_ethAdr~remoteIP
#debug pointer RCU1_ethAdr.remoteIP
 SRC  %IB0
 LEA  RCUs_IPs
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer RCUs_IPs[RCU_Index]
 LD   4   ;SizeOf() 
 MOV  %IB0
#srcline 157 ;   end_if;
PrgMajles_L6:
#srcline 158 ;   
#srcline 159 ;   if GetRemoteIPaddress(chanCode := Eth1_uni1, ethAdr := RCU2_ethAdr) then
 NXT
 LD   uint 6113
 WR   __Instance__GetRemoteIPaddress~chanCode
#debug_left uint __Instance__GetRemoteIPaddress~chanCode
 LEAX RCU2_ethAdr
 WR   __Instance__GetRemoteIPaddress~ethAdr
#debug_left pointer __Instance__GetRemoteIPaddress.ethAdr
 PRV
 LEA  __Instance__GetRemoteIPaddress
 CAL  GetRemoteIPaddress_L0
 JMC  PrgMajles_L8
#srcline 160 ;     RCUs_IPs[RCU_Index + 1] := RCU2_ethAdr.remoteIP;
 LEAX RCU2_ethAdr~remoteIP
#debug pointer RCU2_ethAdr.remoteIP
 SRC  %IB0
 LEA  RCUs_IPs
 LDX  RCU_Index
#debug usint RCU_Index
 LD   usint 1
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer RCUs_IPs[RCU_Index+1]
 LD   4   ;SizeOf() 
 MOV  %IB0
#srcline 161 ;   end_if;
PrgMajles_L8:
#srcline 165 ;  HMIs_Info[HMI_Index].SNo := HMI_Addresses[1];
 LDX  HMI_Addresses[0]
#debug usint HMI_Addresses[1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index].SNo
#srcline 166 ;  HMIs_Info[HMI_Index].readStAdd  := 1;
 LD   uint 1
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readStAdd
#srcline 167 ;  HMIs_Info[HMI_Index].writeStAdd := 61;
 LD   uint 61
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  3  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeStAdd
#srcline 168 ;  HMIs_Info[HMI_Index].readNoPoint  := SIZEOF(HMIs_DataRead[HMI_Index]) / 2;
 LD   104  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  5  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readNoPoint
#srcline 169 ;  HMIs_Info[HMI_Index].writeNoPoint := SIZEOF(HMIs_DataWrite[HMI_Index]) / 2;
 LD   142  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  7  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeNoPoint
#srcline 171 ;  for i := 1 to NumOfHMIsMajles-1 do
 LD   usint 1
 WRX  i
 LD   usint 4
 LD   usint 1
 SUB
 AND  $FF
 WRY  P0__st__
PrgMajles_L10:
 LDX  i
 LDY  P0__st__
 GT   
 JMD  PrgMajles_L11
 DBG  
#srcline 172 ;    HMIs_Info[HMI_Index+i] := HMIs_Info[HMI_Index];
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_Info[HMI_Index]
 SRC  %IB0
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_Info[HMI_Index+i]
 LD   9   ;SizeOf() 
 MOV  %IB0
#srcline 173 ;    HMIs_Info[HMI_Index+i].SNo := HMI_Addresses[i+1];
 LEAX HMI_Addresses
 LDX  i
#debug usint i
 LD   usint 1
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 ADD     ; + offset 
 LDI  
#debug usint HMI_Addresses[i+1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index+i].SNo
#srcline 174 ;  end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L10
PrgMajles_L11:
 NOP  -1
#srcline 177 ;  afterRestart_TP(IN := IS_COLD_RESTART_PLC or IS_HOT_RESTART_PLC, PT := T#2s );
 LD   bool IS_COLD_RESTART_PLC
#debug bool IS_COLD_RESTART_PLC
 LD   bool IS_HOT_RESTART_PLC
#debug bool IS_HOT_RESTART_PLC
 OR  
 WRX  afterRestart_TP~IN
#debug_left bool afterRestart_TP~IN
 LD   time 2000
 WRX  afterRestart_TP~PT
#debug_left time afterRestart_TP~PT
 LEAX afterRestart_TP
 CAL  TP_L0
#srcline 178 ;  afterRestart_TP_FT(CLK := afterRestart_TP.Q);
 LDX  afterRestart_TP~Q
#debug bool afterRestart_TP.Q
 WRX  afterRestart_TP_FT~CLK
#debug_left bool afterRestart_TP_FT~CLK
 LEAX afterRestart_TP_FT
 CAL  F_TRIG_L0
#srcline 180 ;  if afterRestart_TP_FT.Q then
 LDX  afterRestart_TP_FT~Q
#debug bool afterRestart_TP_FT.Q
 JMC  PrgMajles_L12
#srcline 181 ;     SendIamServer := 1;
 LD   bool -1      ; true
 WRX  SendIamServer
#debug_left bool SendIamServer
#srcline 182 ;  end_if;
PrgMajles_L12:
#srcline 184 ;  controlRoomRCU1(RCU_ChCode := ETH1_uni0 , RCU_PingDone := RCUs_PingDone[RCU_Index],
 LD   uint 2017
 WRX  controlRoomRCU1~RCU_ChCode
#debug_left uint controlRoomRCU1~RCU_ChCode
 LEA  RCUs_PingDone
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool RCUs_PingDone[RCU_Index]
 WRX  controlRoomRCU1~RCU_PingDone
#debug_left bool controlRoomRCU1~RCU_PingDone
#srcline 185 ;              numOfLights := NumOfLightMajles , numOfOutlets := NumOfOutletMajles , numOfCurtains := 0, numOfMotionSens := NumOfMotionSensMajles,
 LD   usint 15
 WRX  controlRoomRCU1~numOfLights
#debug_left usint controlRoomRCU1~numOfLights
 LD   usint 1
 WRX  controlRoomRCU1~numOfOutlets
#debug_left usint controlRoomRCU1~numOfOutlets
 LD   usint 0
 WRX  controlRoomRCU1~numOfCurtains
#debug_left usint controlRoomRCU1~numOfCurtains
 LD   usint 1
 WRX  controlRoomRCU1~numOfMotionSens
#debug_left usint controlRoomRCU1~numOfMotionSens
#srcline 186 ;              lightsOutputDevs := lightsOutputDevs , outletOutputDevs := outletOutputDevsRCU1 ,
 LEAX lightsOutputDevs
#debug pointer lightsOutputDevs
 SRC  %IB0
 LEAX controlRoomRCU1~lightsOutputDevs
 LD   51   ;SizeOf() 
 MOV  %IB0
 LEAX outletOutputDevsRCU1
#debug pointer outletOutputDevsRCU1
 SRC  %IB0
 LEAX controlRoomRCU1~outletOutputDevs
 LD   24   ;SizeOf() 
 MOV  %IB0
#srcline 187 ;              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
 LEAX curtainsUpOutputDevs
#debug pointer curtainsUpOutputDevs
 SRC  %IB0
 LEAX controlRoomRCU1~curtainsUpOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
 LEAX curtainsDwOutputDevs
#debug pointer curtainsDwOutputDevs
 SRC  %IB0
 LEAX controlRoomRCU1~curtainsDwOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
#srcline 188 ;              RCU_CH_IN := void(ETH1_uni0_IN) , LightsStatus := lightsStatusMajles ,OutletsStatus := outletsStatusMajles, MotionSenStatus := motionSensStatus,
 LEA  ETH1_uni0_IN
 WRX  controlRoomRCU1~RCU_CH_IN
#debug_left pointer controlRoomRCU1.RCU_CH_IN
 LEA  lightsStatusMajles
 WRX  controlRoomRCU1~LightsStatus
#debug_left pointer controlRoomRCU1.LightsStatus
 LEA  outletsStatusMajles
 WRX  controlRoomRCU1~OutletsStatus
#debug_left pointer controlRoomRCU1.OutletsStatus
 LEAX motionSensStatus
 WRX  controlRoomRCU1~MotionSenStatus
#debug_left pointer controlRoomRCU1.MotionSenStatus
#srcline 189 ;              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := EnOutlets ,EnOutletsAN :=EnOutletsAN ,
 LEAX EnLights
 WRX  controlRoomRCU1~EnLights
#debug_left pointer controlRoomRCU1.EnLights
 LEAX EnLightsAN
 WRX  controlRoomRCU1~EnLightsAN
#debug_left pointer controlRoomRCU1.EnLightsAN
 LEAX EnOutlets
 WRX  controlRoomRCU1~EnOutlets
#debug_left pointer controlRoomRCU1.EnOutlets
 LEAX EnOutletsAN
 WRX  controlRoomRCU1~EnOutletsAN
#debug_left pointer controlRoomRCU1.EnOutletsAN
#srcline 190 ;              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus );
 LEAX SendIamServer
 WRX  controlRoomRCU1~SendIamServer
#debug_left pointer controlRoomRCU1.SendIamServer
 LEAX GetAllStatus
 WRX  controlRoomRCU1~GetAllStatus
#debug_left pointer controlRoomRCU1.GetAllStatus
 LEAX controlRoomRCU1
 CAL  fbControlRoom_L0
#srcline 191 ;              
#srcline 192 ;  controlRoomRCU2(RCU_ChCode := ETH1_uni1 , RCU_PingDone := RCUs_PingDone[RCU_Index + 1],
 LD   uint 6113
 WRX  controlRoomRCU2~RCU_ChCode
#debug_left uint controlRoomRCU2~RCU_ChCode
 LEA  RCUs_PingDone
 LDX  RCU_Index
#debug usint RCU_Index
 LD   usint 1
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool RCUs_PingDone[RCU_Index+1]
 WRX  controlRoomRCU2~RCU_PingDone
#debug_left bool controlRoomRCU2~RCU_PingDone
#srcline 193 ;              numOfLights := 0 , numOfOutlets := 0 , numOfCurtains := NumOfCurtainMajles, numOfMotionSens := 0,
 LD   usint 0
 WRX  controlRoomRCU2~numOfLights
#debug_left usint controlRoomRCU2~numOfLights
 LD   usint 0
 WRX  controlRoomRCU2~numOfOutlets
#debug_left usint controlRoomRCU2~numOfOutlets
 LD   usint 5
 WRX  controlRoomRCU2~numOfCurtains
#debug_left usint controlRoomRCU2~numOfCurtains
 LD   usint 0
 WRX  controlRoomRCU2~numOfMotionSens
#debug_left usint controlRoomRCU2~numOfMotionSens
#srcline 194 ;              outletOutputDevs := outletOutputDevsRCU2,
 LEAX outletOutputDevsRCU2
#debug pointer outletOutputDevsRCU2
 SRC  %IB0
 LEAX controlRoomRCU2~outletOutputDevs
 LD   24   ;SizeOf() 
 MOV  %IB0
#srcline 195 ;              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
 LEAX curtainsUpOutputDevs
#debug pointer curtainsUpOutputDevs
 SRC  %IB0
 LEAX controlRoomRCU2~curtainsUpOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
 LEAX curtainsDwOutputDevs
#debug pointer curtainsDwOutputDevs
 SRC  %IB0
 LEAX controlRoomRCU2~curtainsDwOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
#srcline 196 ;              RCU_CH_IN := void(ETH1_uni1_IN) , LightsStatus := lightsStatusMajles ,OutletsStatus := void(outletsStatusMajles[6]), MotionSenStatus := motionSensStatus,
 LEA  ETH1_uni1_IN
 WRX  controlRoomRCU2~RCU_CH_IN
#debug_left pointer controlRoomRCU2.RCU_CH_IN
 LEA  lightsStatusMajles
 WRX  controlRoomRCU2~LightsStatus
#debug_left pointer controlRoomRCU2.LightsStatus
 LEA  outletsStatusMajles
 ADD  5   ; Index
 WRX  controlRoomRCU2~OutletsStatus
#debug_left pointer controlRoomRCU2.OutletsStatus
 LEAX motionSensStatus
 WRX  controlRoomRCU2~MotionSenStatus
#debug_left pointer controlRoomRCU2.MotionSenStatus
#srcline 197 ;              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := void(EnOutlets[6]) ,EnOutletsAN := void(EnOutletsAN[6]) ,
 LEAX EnLights
 WRX  controlRoomRCU2~EnLights
#debug_left pointer controlRoomRCU2.EnLights
 LEAX EnLightsAN
 WRX  controlRoomRCU2~EnLightsAN
#debug_left pointer controlRoomRCU2.EnLightsAN
 LEAX EnOutlets
 ADD  5   ; Index
 WRX  controlRoomRCU2~EnOutlets
#debug_left pointer controlRoomRCU2.EnOutlets
 LEAX EnOutletsAN
 ADD  5  ; + offset 
 WRX  controlRoomRCU2~EnOutletsAN
#debug_left pointer controlRoomRCU2.EnOutletsAN
#srcline 198 ;              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus );
 LEAX SendIamServer
 WRX  controlRoomRCU2~SendIamServer
#debug_left pointer controlRoomRCU2.SendIamServer
 LEAX GetAllStatus
 WRX  controlRoomRCU2~GetAllStatus
#debug_left pointer controlRoomRCU2.GetAllStatus
 LEAX controlRoomRCU2
 CAL  fbControlRoom_L0
#srcline 200 ;              //stLightsMajlesAN := lightsStatusMajles[1];
#srcline 203 ;   FCU[1](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_Majles[1], temp := FCU_Temp_Majles1, valve := FCU_valve_Majles1, fanLow := FCU_fanLow_Majles1,
 LDX  enableFCU[0]
#debug bool enableFCU[1]
 WRX  FCU[0]~enable
#debug_left bool FCU[0]~enable
 LEAX settingsFCU
 LDI  
#debug usint settingsFCU[1].FCU_Mode
 WRX  FCU[0]~mode
#debug_left usint FCU[0]~mode
 LEAX settingsFCU
 ADD  1  ; + offset 
 LDI  
#debug usint settingsFCU[1].FCU_FanSpeed
 WRX  FCU[0]~fanSpeed
#debug_left usint FCU[0]~fanSpeed
 LD   setTempFCU_Majles[0]
#debug real setTempFCU_Majles[1]
 WRX  FCU[0]~setTemp
#debug_left real FCU[0]~setTemp
 LD   real FCU_Temp_Majles1
#debug real FCU_Temp_Majles1
 WRX  FCU[0]~temp
#debug_left real FCU[0]~temp
 LEA  FCU_valve_Majles1
 WRX  FCU[0]~valve
#debug_left pointer FCU[0].valve
 LEA  FCU_fanLow_Majles1
 WRX  FCU[0]~fanLow
#debug_left pointer FCU[0].fanLow
#srcline 204 ;                 fanMed := FCU_fanMed_Majles1, fanHigh := FCU_fanHigh_Majles1);
 LEA  FCU_fanMed_Majles1
 WRX  FCU[0]~fanMed
#debug_left pointer FCU[0].fanMed
 LEA  FCU_fanHigh_Majles1
 WRX  FCU[0]~fanHigh
#debug_left pointer FCU[0].fanHigh
 LEAX FCU
 CAL  fbControlFCU_L0
#srcline 205 ;                 
#srcline 206 ;   FCU[2](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_Majles[1], temp := FCU_Temp_Majles1, valve := FCU_valve_Majles2, fanLow := FCU_fanLow_Majles2,
 LDX  enableFCU[0]
#debug bool enableFCU[1]
 WRX  FCU[1]~enable
#debug_left bool FCU[1]~enable
 LEAX settingsFCU
 LDI  
#debug usint settingsFCU[1].FCU_Mode
 WRX  FCU[1]~mode
#debug_left usint FCU[1]~mode
 LEAX settingsFCU
 ADD  1  ; + offset 
 LDI  
#debug usint settingsFCU[1].FCU_FanSpeed
 WRX  FCU[1]~fanSpeed
#debug_left usint FCU[1]~fanSpeed
 LD   setTempFCU_Majles[0]
#debug real setTempFCU_Majles[1]
 WRX  FCU[1]~setTemp
#debug_left real FCU[1]~setTemp
 LD   real FCU_Temp_Majles1
#debug real FCU_Temp_Majles1
 WRX  FCU[1]~temp
#debug_left real FCU[1]~temp
 LEA  FCU_valve_Majles2
 WRX  FCU[1]~valve
#debug_left pointer FCU[1].valve
 LEA  FCU_fanLow_Majles2
 WRX  FCU[1]~fanLow
#debug_left pointer FCU[1].fanLow
#srcline 207 ;                 fanMed := FCU_fanMed_Majles2, fanHigh := FCU_fanHigh_Majles2);
 LEA  FCU_fanMed_Majles2
 WRX  FCU[1]~fanMed
#debug_left pointer FCU[1].fanMed
 LEA  FCU_fanHigh_Majles2
 WRX  FCU[1]~fanHigh
#debug_left pointer FCU[1].fanHigh
 LEAX FCU
 ADD  66  ; + offset 
 CAL  fbControlFCU_L0
#srcline 213 ;   for i := 1 to NumOfLightMajles do
 LD   usint 1
 WRX  i
 LD   usint 15
 WRY  P1__st__
PrgMajles_L14:
 LDX  i
 LDY  P1__st__
 GT   
 JMD  PrgMajles_L15
 DBG  
#srcline 214 ;       HMIs_DataWrite[HMI_Index].lightsStatus[i] := BOOL_TO_WORD(lightsStatusMajles[i]);
 LEA  lightsStatusMajles
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool lightsStatusMajles[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].lightsStatus[i]
#srcline 215 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L14
PrgMajles_L15:
 NOP  -1
#srcline 217 ;   for i := 1 to NumOfOutletMajles do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P2__st__
PrgMajles_L16:
 LDX  i
 LDY  P2__st__
 GT   
 JMD  PrgMajles_L17
 DBG  
#srcline 218 ;       HMIs_DataWrite[HMI_Index].outletsStatus[i] := BOOL_TO_WORD(outletsStatusMajles[i]);
 LEA  outletsStatusMajles
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool outletsStatusMajles[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].outletsStatus[i]
#srcline 219 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L16
PrgMajles_L17:
 NOP  -1
#srcline 221 ;   for i := 1 to NumOfMotionSensMajles do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P3__st__
PrgMajles_L18:
 LDX  i
 LDY  P3__st__
 GT   
 JMD  PrgMajles_L19
 DBG  
#srcline 222 ;       HMIs_DataWrite[HMI_Index].motionSensStatus[i] := BOOL_TO_WORD(motionSensStatus[i]);
 LEAX motionSensStatus
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool motionSensStatus[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].motionSensStatus[i]
#srcline 223 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L18
PrgMajles_L19:
 NOP  -1
#srcline 224 ;   
#srcline 225 ;   for i := 1 to NumOfFCUsMajles do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P4__st__
PrgMajles_L20:
 LDX  i
 LDY  P4__st__
 GT   
 JMD  PrgMajles_L21
 DBG  
#srcline 226 ;      HMIs_DataWrite[HMI_Index].FCUs_Status[i] := FCU[i].FCU_Status;
 LEAX FCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  66   ; SizeOf(...)
 ADD     ; + offset 
 ADD  11  ; + offset 
#debug pointer FCU[i].FCU_Status
 SRC  %IB0
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  94  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  16   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_DataWrite[HMI_Index].FCUs_Status[i]
 LD   16   ;SizeOf() 
 MOV  %IB0
#srcline 227 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L20
PrgMajles_L21:
 NOP  -1
#srcline 231 ;   for i := 1 to NumOfHMIsMajles-1 do
 LD   usint 1
 WRX  i
 LD   usint 4
 LD   usint 1
 SUB
 AND  $FF
 WRY  P5__st__
PrgMajles_L22:
 LDX  i
 LDY  P5__st__
 GT   
 JMD  PrgMajles_L23
 DBG  
#srcline 232 ;     HMIs_DataWrite[HMI_Index+i] := HMIs_DataWrite[HMI_Index];
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_DataWrite[HMI_Index]
 SRC  %IB0
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_DataWrite[HMI_Index+i]
 LD   142   ;SizeOf() 
 MOV  %IB0
#srcline 233 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L22
PrgMajles_L23:
 NOP  -1
#srcline 236 ;   for j := 1 to NumOfHMIsMajles do
 LD   usint 1
 WRX  j
 LD   usint 4
 WRY  P6__st__
PrgMajles_L24:
 LDX  j
 LDY  P6__st__
 GT   
 JMD  PrgMajles_L25
 DBG  
#srcline 237 ;     for i := 1 to NumOfLightMajles do
 LD   usint 1
 WRX  i
 LD   usint 15
 WRY  P7__st__
PrgMajles_L26:
 LDX  i
 LDY  P7__st__
 GT   
 JMD  PrgMajles_L27
 DBG  
#srcline 239 ;         enLights_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  15   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 14   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P8__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P8__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P8__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 241 ;         enLights_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  15   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 14   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P9__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P9__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P9__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 243 ;         if enLights_RT[j,i].Q or enLights_FT[j,i].Q then
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  15   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 14   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_RT[j,i].Q
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  15   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 14   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_FT[j,i].Q
 OR  
 JMC  PrgMajles_L28
#srcline 244 ;            EnLights[i] := 1;
 LD   bool -1      ; true
 LEAX EnLights
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnLights[i]
#srcline 245 ;         end_if;
PrgMajles_L28:
#srcline 246 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L26
PrgMajles_L27:
 NOP  -1
#srcline 247 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgMajles_L24
PrgMajles_L25:
 NOP  -1
#srcline 249 ;   for j := 1 to NumOfHMIsMajles do
 LD   usint 1
 WRX  j
 LD   usint 4
 WRY  P10__st__
PrgMajles_L30:
 LDX  j
 LDY  P10__st__
 GT   
 JMD  PrgMajles_L31
 DBG  
#srcline 250 ;     for i := 1 to NumOfOutletMajles do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P11__st__
PrgMajles_L32:
 LDX  i
 LDY  P11__st__
 GT   
 JMD  PrgMajles_L33
 DBG  
#srcline 252 ;         enOutlets_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P12__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P12__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P12__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 254 ;         enOutlets_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P13__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P13__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P13__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 256 ;         if enOutlets_RT[j,i].Q or enOutlets_FT[j,i].Q then
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_RT[j,i].Q
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_FT[j,i].Q
 OR  
 JMC  PrgMajles_L34
#srcline 257 ;            EnOutlets[i] := 1;
 LD   bool -1      ; true
 LEAX EnOutlets
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnOutlets[i]
#srcline 258 ;         end_if;
PrgMajles_L34:
#srcline 259 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L32
PrgMajles_L33:
 NOP  -1
#srcline 260 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgMajles_L30
PrgMajles_L31:
 NOP  -1
#srcline 263 ;   for j := 1 to NumOfHMIsMajles do
 LD   usint 1
 WRX  j
 LD   usint 4
 WRY  P14__st__
PrgMajles_L36:
 LDX  j
 LDY  P14__st__
 GT   
 JMD  PrgMajles_L37
 DBG  
#srcline 264 ;     for i := 1 to NumOfCurtainMajles do
 LD   usint 1
 WRX  i
 LD   usint 5
 WRY  P15__st__
PrgMajles_L38:
 LDX  i
 LDY  P15__st__
 GT   
 JMD  PrgMajles_L39
 DBG  
#srcline 266 ;         enCurtainsUP_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P16__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P16__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P16__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 268 ;         enCurtainsUP_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P17__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P17__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P17__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 270 ;         if enCurtainsUP_RT[j,i].Q or enCurtainsUP_FT[j,i].Q then
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_RT[j,i].Q
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_FT[j,i].Q
 OR  
 JMC  PrgMajles_L40
#srcline 271 ;            EnCurtainsUp[i] := 1;
 LD   bool -1      ; true
 LEAX EnCurtainsUp
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnCurtainsUp[i]
#srcline 272 ;         end_if;
PrgMajles_L40:
#srcline 275 ;         enCurtainsDW_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P18__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P18__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P18__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 277 ;         enCurtainsDW_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P19__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P19__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P19__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 279 ;         if enCurtainsDW_RT[j,i].Q or enCurtainsDW_FT[j,i].Q then
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_RT[j,i].Q
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_FT[j,i].Q
 OR  
 JMC  PrgMajles_L42
#srcline 280 ;            EnCurtainsDw[i] := 1;
 LD   bool -1      ; true
 LEAX EnCurtainsDw
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnCurtainsDw[i]
#srcline 281 ;         end_if;
PrgMajles_L42:
#srcline 283 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L38
PrgMajles_L39:
 NOP  -1
#srcline 284 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgMajles_L36
PrgMajles_L37:
 NOP  -1
#srcline 286 ;   for j := 1 to NumOfHMIsMajles do
 LD   usint 1
 WRX  j
 LD   usint 4
 WRY  P20__st__
PrgMajles_L44:
 LDX  j
 LDY  P20__st__
 GT   
 JMD  PrgMajles_L45
 DBG  
#srcline 287 ;      for i := 1 to NumOfFCUsMajles do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P21__st__
PrgMajles_L46:
 LDX  i
 LDY  P21__st__
 GT   
 JMD  PrgMajles_L47
 DBG  
#srcline 288 ;          enFCUs_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
 LEAX enFCUs_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P22__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].onOff
 LDY  P22__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P22__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 289 ;          enFCUs_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
 LEAX enFCUs_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P23__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].onOff
 LDY  P23__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P23__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 291 ;          if enFCUs_FT[j,i].Q then
 LEAX enFCUs_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUs_FT[j,i].Q
 JMC  PrgMajles_L48
#srcline 292 ;             enableFCU[i] := 0;
 LD   bool 0       ; false
 LEAX enableFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enableFCU[i]
#srcline 293 ;          end_if;
PrgMajles_L48:
#srcline 294 ;          if enFCUs_RT[j,i].Q then
 LEAX enFCUs_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUs_RT[j,i].Q
 JMC  PrgMajles_L50
#srcline 295 ;             enableFCU[i] := 1;
 LD   bool -1      ; true
 LEAX enableFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enableFCU[i]
#srcline 296 ;          end_if;
PrgMajles_L50:
#srcline 298 ;          enFanAuto_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed = 8));
 LEAX enFanAuto_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P24__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed
 LD   word 8
 EQ
 LDY  P24__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P24__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 299 ;          enFanLow_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.0);
 LEAX enFanLow_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P25__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.0
 LDY  P25__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P25__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 300 ;          enFanMed_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.1);
 LEAX enFanMed_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P26__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.1
 LDY  P26__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P26__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 301 ;          enFanHigh_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.2);
 LEAX enFanHigh_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P27__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.2
 LDY  P27__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P27__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 303 ;          if enFanAuto_RT[j,i].Q then
 LEAX enFanAuto_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanAuto_RT[j,i].Q
 JMC  PrgMajles_L52
#srcline 304 ;             settingsFCU[i].FCU_FanSpeed := auto;
 LD   udint 0  ; TFCU_FanSpeed#auto
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 305 ;          end_if;
PrgMajles_L52:
#srcline 306 ;          if enFanLow_RT[j,i].Q then
 LEAX enFanLow_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanLow_RT[j,i].Q
 JMC  PrgMajles_L54
#srcline 307 ;             settingsFCU[i].FCU_FanSpeed := low;
 LD   udint 1  ; TFCU_FanSpeed#low
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 308 ;          end_if;
PrgMajles_L54:
#srcline 309 ;          if enFanMed_RT[j,i].Q then
 LEAX enFanMed_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanMed_RT[j,i].Q
 JMC  PrgMajles_L56
#srcline 310 ;             settingsFCU[i].FCU_FanSpeed := med;
 LD   udint 2  ; TFCU_FanSpeed#med
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 311 ;          end_if;
PrgMajles_L56:
#srcline 312 ;          if enFanHigh_RT[j,i].Q then
 LEAX enFanHigh_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanHigh_RT[j,i].Q
 JMC  PrgMajles_L58
#srcline 313 ;             settingsFCU[i].FCU_FanSpeed := high;
 LD   udint 3  ; TFCU_FanSpeed#high
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 314 ;          end_if;
PrgMajles_L58:
#srcline 316 ;          enFCUCool_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode = 0));
 LEAX enFCUCool_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P28__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  8  ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].mode
 LD   word 0
 EQ
 LDY  P28__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P28__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 317 ;          enFCUFanOnly_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode.0);
 LEAX enFCUFanOnly_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P29__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  8  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].mode.0
 LDY  P29__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P29__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 319 ;          if enFCUCool_RT[j,i].Q then
 LEAX enFCUCool_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUCool_RT[j,i].Q
 JMC  PrgMajles_L60
#srcline 320 ;             settingsFCU[i].FCU_Mode := cooling;
 LD   udint 0  ; TFCU_Mode#cooling
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_Mode
#srcline 321 ;          end_if;
PrgMajles_L60:
#srcline 322 ;          if enFCUFanOnly_RT[j,i].Q then
 LEAX enFCUFanOnly_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUFanOnly_RT[j,i].Q
 JMC  PrgMajles_L62
#srcline 323 ;             settingsFCU[i].FCU_Mode := fanOnly;
 LD   udint 1  ; TFCU_Mode#fanOnly
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_Mode
#srcline 324 ;          end_if;
PrgMajles_L62:
#srcline 326 ;          enSetTempIncr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
 LEAX enSetTempIncr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P30__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.0
 LDY  P30__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P30__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 327 ;          enSetTempIncr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
 LEAX enSetTempIncr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P31__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.0
 LDY  P31__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P31__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 329 ;          if enSetTempIncr_RT[j,i].Q or enSetTempIncr_FT[j,i].Q then
 LEAX enSetTempIncr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempIncr_RT[j,i].Q
 LEAX enSetTempIncr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempIncr_FT[j,i].Q
 OR  
 JMC  PrgMajles_L64
#srcline 330 ;             setTempFCU_Majles[j] := setTempFCU_Majles[j] + 0.5;
 LEA  setTempFCU_Majles
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 LDIL 
#debug real setTempFCU_Majles[j]
 LD   real 0.5
 ADF
 LEA  setTempFCU_Majles
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 WRIL 
#debug_left real setTempFCU_Majles[j]
#srcline 331 ;          end_if;
PrgMajles_L64:
#srcline 333 ;          enSetTempDecr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
 LEAX enSetTempDecr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P32__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.1
 LDY  P32__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P32__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 334 ;          enSetTempDecr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
 LEAX enSetTempDecr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P33__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.1
 LDY  P33__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P33__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 336 ;          if enSetTempDecr_RT[j,i].Q or enSetTempDecr_FT[j,i].Q then
 LEAX enSetTempDecr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempDecr_RT[j,i].Q
 LEAX enSetTempDecr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 1   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempDecr_FT[j,i].Q
 OR  
 JMC  PrgMajles_L66
#srcline 337 ;             setTempFCU_Majles[j] := setTempFCU_Majles[j] - 0.5;
 LEA  setTempFCU_Majles
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 LDIL 
#debug real setTempFCU_Majles[j]
 LD   real 0.5
 SUF
 LEA  setTempFCU_Majles
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 WRIL 
#debug_left real setTempFCU_Majles[j]
#srcline 338 ;          end_if;
PrgMajles_L66:
#srcline 340 ;      end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgMajles_L46
PrgMajles_L47:
 NOP  -1
#srcline 341 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgMajles_L44
PrgMajles_L45:
 NOP  -1
#srcline 343 ;END_PROGRAM
 ULNK
RET
E     61

; Initialize - variables
P     61
PrgMajles__InstanceInit__:
 LINK 0
 LD   0
 SRC  byte __Init___PrgMajles_RCU_IP
 LEAX byte RCU_IP
 LD   4
 MOV  %X0
 LEAX controlRoomRCU1
 CAL  fbControlRoom__InstanceInit__
 LEAX controlRoomRCU2
 CAL  fbControlRoom__InstanceInit__
 LD   0
 SRC  byte __Init___PrgMajles_lightsOutputDevs
 LEAX byte lightsOutputDevs
 LD   51
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_outletOutputDevsRCU1
 LEAX byte outletOutputDevsRCU1
 LD   24
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_outletOutputDevsRCU2
 LEAX byte outletOutputDevsRCU2
 LD   24
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_curtainsUpOutputDevs
 LEAX byte curtainsUpOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_curtainsDwOutputDevs
 LEAX byte curtainsDwOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_motionSensOutputDevs
 LEAX byte motionSensOutputDevs
 LD   12
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enLights_FT
 LEAX byte enLights_FT[0]
 LD   60
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enOutlets_FT
 LEAX byte enOutlets_FT[0]
 LD   4
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enCurtainsUP_FT
 LEAX byte enCurtainsUP_FT[0]
 LD   20
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enCurtainsDW_FT
 LEAX byte enCurtainsDW_FT[0]
 LD   20
 MOV  %X0
 LEAX afterRestart_TP_FT
 CAL  F_TRIG__InstanceInit__
 LD   0
 SRC  byte __Init___PrgMajles_enFCUs_FT
 LEAX byte enFCUs_FT[0]
 LD   8
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enSetTempIncr_FT
 LEAX byte enSetTempIncr_FT[0]
 LD   8
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_enSetTempDecr_FT
 LEAX byte enSetTempDecr_FT[0]
 LD   8
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgMajles_HMI_Addresses
 LEAX byte HMI_Addresses[0]
 LD   4
 MOV  %X0
 ULNK
RET
E     61
; End initialize - variables
#endpou 


P     59
; Initialize retain global variables 
 LD   0
 SRC  byte __Init____setTempFCU_Majles
 LD   0
 LD   8
 MOV  byte setTempFCU_Majles[0]
E     59

 

#srcfile ''
