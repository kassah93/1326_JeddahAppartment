#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC1\PRGROOM1.ST'

; Global variables
#def  NumOfLightRoom1 5
#def  NumOfOutletRoom1 1
#def  NumOfCurtainRoom1 1
#def  NumOfMotionSensRoom1 2
#def  NumOfFCUsRoom1 1
#def  NumOfHMIsRoom1 2

; Global variables
#rem  aligned bool lightsStatusRoom1[24]
#rem  aligned bool outletsStatusRoom1[8]
#rem  real setTempFCU_Room1

#defpou PrgRoom1
  bool lightsSelect,
  bool socketsSelect,
  bool shuttersSelect,
  bool AC_Select,
  usint navSelect,
  TRemoteEthAdr RCU_ethAdr,
  TIPadr RCU_IP,  ;IP address
  uint RCU_Ch_localPort,
  bool Set_IP,
  bool GetAllStatus,
  bool SendIamServer,
  fbControlRoom controlRoom,
  TlightsOutputDevs lightsOutputDevs,
  ToutletOutputDevs outletOutputDevs,
  TcurtainsUpOutputDevs curtainsUpOutputDevs,
  TcurtainsDwOutputDevs curtainsDwOutputDevs,
  TMotionSensOutputDevs motionSensOutputDevs,
  aligned bool[24] EnLights,
  TEnLightsAN EnLightsAN,  ; 1:open  2:close 0:None
  aligned bool[8] EnOutlets,
  TEnOutletsAN EnOutletsAN,  ; 1:open  2:close 0:None
  R_TRIG[10] enLights_RT,
  F_TRIG[10] enLights_FT,
  R_TRIG[2] enOutlets_RT,
  F_TRIG[2] enOutlets_FT,
  R_TRIG[2] enCurtainsUP_RT,
  F_TRIG[2] enCurtainsUP_FT,
  R_TRIG[2] enCurtainsDW_RT,
  F_TRIG[2] enCurtainsDW_FT,
  R_TRIG enCurtainsUP_SW_RT,
  F_TRIG enCurtainsUP_SW_FT,
  R_TRIG enCurtainsDW_SW_RT,
  F_TRIG enCurtainsDW_SW_FT,
  aligned bool[8] enCurtainsUP_GUI,
  aligned bool[8] enCurtainsDW_GUI,
  usint CurtStatus_Index,
  usint CurtEn_Index,
  usint i,
  usint j,
  TP afterRestart_TP,
  F_TRIG afterRestart_TP_FT,
  aligned bool[8] motionSensStatus,
  aligned bool[8] CurtainsUpStatus,
  aligned bool[8] CurtainsDwStatus,
  fbControlFCU FCU,
  aligned bool[8] enableFCU,
  TFCU_Settings settingsFCU,
  F_TRIG[2] enFCUs_FT,
  R_TRIG[2] enFCUs_RT,
  R_TRIG[2] enFanHigh_RT,
  R_TRIG[2] enFanMed_RT,
  R_TRIG[2] enFanLow_RT,
  R_TRIG[2] enFanAuto_RT,
  R_TRIG[2] enFCUCool_RT,
  R_TRIG[2] enFCUFanOnly_RT,
  R_TRIG[2] enSetTempIncr_RT,
  F_TRIG[2] enSetTempIncr_FT,
  R_TRIG[2] enSetTempDecr_RT,
  F_TRIG[2] enSetTempDecr_FT,
  usint HMI_Index,
  usint RCU_Index,
  usint[2] HMI_Addresses

#table byte __Init____setTempFCU_Room1 = 
      0,  0,160, 65;
 
#srcfile 'E:\PROJECTS\PROJECTS\1326 - OSAMA - JEDDAH APPARTMENT - DREAMS TOWERS\IMPLEMENTATION\CODES\MOSAIC\1326 - JEDDAH APPARTMENT - LAST\PLC1\PRGROOM1.ST'
#pou PrgRoom1
#srcline 17 ;PROGRAM PrgRoom1
#table byte __Init___PrgRoom1_RCU_IP = 
    192,168,  0, 23;
#table byte __Init___PrgRoom1_lightsOutputDevs = 
      1,  1,  0,  1,  2,  0,  1,  3,  0,  1,  4,  0,  1,  5;
#table byte __Init___PrgRoom1_outletOutputDevs = 
      1,  6;
#table byte __Init___PrgRoom1_curtainsUpOutputDevs = 
      1,  8;
#table byte __Init___PrgRoom1_curtainsDwOutputDevs = 
      1,  9;
#table byte __Init___PrgRoom1_motionSensOutputDevs = 
      1,  1,  0,  1,  2;
#table byte __Init___PrgRoom1_enLights_FT = 
      4,  4,  4,  4,  4,  4,  4,  4,  4,  4;
#table byte __Init___PrgRoom1_enOutlets_FT = 
      4,  4;
#table byte __Init___PrgRoom1_enCurtainsUP_FT = 
      4,  4;
#table byte __Init___PrgRoom1_enCurtainsDW_FT = 
      4,  4;
#table byte __Init___PrgRoom1_enCurtainsUP_SW_FT = 
      4,199;
#table byte __Init___PrgRoom1_enCurtainsDW_SW_FT = 
      4,191;
#table byte __Init___PrgRoom1_enFCUs_FT = 
      4,  4;
#table byte __Init___PrgRoom1_enSetTempIncr_FT = 
      4,  4;
#table byte __Init___PrgRoom1_enSetTempDecr_FT = 
      4,  4;
#table byte __Init___PrgRoom1_HMI_Addresses = 
     16, 17;

#struct PrgRoom1__temp__
  usint P0__st__,
  usint P1__st__,
  usint P2__st__,
  usint P3__st__,
  usint P4__st__,
  usint P5__st__,
  usint P6__st__,
  usint P7__st__,
  usint P8__st__,
  udint P9__st__,
  udint P10__st__,
  usint P11__st__,
  usint P12__st__,
  udint P13__st__,
  udint P14__st__,
  usint P15__st__,
  usint P16__st__,
  udint P17__st__,
  udint P18__st__,
  udint P19__st__,
  udint P20__st__,
  udint P21__st__,
  udint P22__st__,
  udint P23__st__,
  udint P24__st__,
  usint P25__st__,
  usint P26__st__,
  udint P27__st__,
  udint P28__st__,
  udint P29__st__,
  udint P30__st__,
  udint P31__st__,
  udint P32__st__,
  udint P33__st__,
  udint P34__st__,
  udint P35__st__,
  udint P36__st__,
  udint P37__st__,
  udint P38__st__
P     61
PrgRoom1_L0:
 LINK __SizeOf(PrgRoom1__temp__)
; Initialize - dynamic variables
; End initialize - dynamic variables
#srcline 126 ;   if navSelect = 0 then
 LDX  navSelect
#debug usint navSelect
 LD   usint 0
 EQ
 JMC  PrgRoom1_L1
#srcline 127 ;     lightsSelect   := 1;
 LD   bool -1      ; true
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 128 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 129 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 130 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 131 ;  elsif navSelect = 1 then
 JMP  PrgRoom1_L2
PrgRoom1_L1:
 LDX  navSelect
#debug usint navSelect
 LD   usint 1
 EQ
 JMC  PrgRoom1_L3
#srcline 132 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 133 ;     socketsSelect  := 1;
 LD   bool -1      ; true
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 134 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 135 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 136 ;  elsif navSelect = 2 then
 JMP  PrgRoom1_L2
PrgRoom1_L3:
 LDX  navSelect
#debug usint navSelect
 LD   usint 2
 EQ
 JMC  PrgRoom1_L4
#srcline 137 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 138 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 139 ;     shuttersSelect := 1;
 LD   bool -1      ; true
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 140 ;     AC_Select      := 0;
 LD   bool 0       ; false
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 141 ;  elsif navSelect = 3 then
 JMP  PrgRoom1_L2
PrgRoom1_L4:
 LDX  navSelect
#debug usint navSelect
 LD   usint 3
 EQ
 JMC  PrgRoom1_L5
#srcline 142 ;     lightsSelect   := 0;
 LD   bool 0       ; false
 WRX  lightsSelect
#debug_left bool lightsSelect
#srcline 143 ;     socketsSelect  := 0;
 LD   bool 0       ; false
 WRX  socketsSelect
#debug_left bool socketsSelect
#srcline 144 ;     shuttersSelect := 0;
 LD   bool 0       ; false
 WRX  shuttersSelect
#debug_left bool shuttersSelect
#srcline 145 ;     AC_Select      := 1;
 LD   bool -1      ; true
 WRX  AC_Select
#debug_left bool AC_Select
#srcline 146 ;  end_if;
 JMP  PrgRoom1_L2
PrgRoom1_L5:
PrgRoom1_L2:
#srcline 148 ;  HMI_Index := 5;
 LD   usint 5
 WRX  HMI_Index
#debug_left usint HMI_Index
#srcline 149 ;  RCU_Index := 3;
 LD   usint 3
 WRX  RCU_Index
#debug_left usint RCU_Index
#srcline 150 ;  CurtStatus_Index := 6;
 LD   usint 6
 WRX  CurtStatus_Index
#debug_left usint CurtStatus_Index
#srcline 151 ;  CurtEn_Index  := 6;
 LD   usint 6
 WRX  CurtEn_Index
#debug_left usint CurtEn_Index
#srcline 153 ;  if GetRemoteIPaddress(chanCode := Eth1_uni2, ethAdr := RCU_ethAdr) then
 NXT
 LD   uint 10209
 WR   __Instance__GetRemoteIPaddress~chanCode
#debug_left uint __Instance__GetRemoteIPaddress~chanCode
 LEAX RCU_ethAdr
 WR   __Instance__GetRemoteIPaddress~ethAdr
#debug_left pointer __Instance__GetRemoteIPaddress.ethAdr
 PRV
 LEA  __Instance__GetRemoteIPaddress
 CAL  GetRemoteIPaddress_L0
 JMC  PrgRoom1_L6
#srcline 154 ;     RCUs_IPs[RCU_Index] := RCU_ethAdr.remoteIP;
 LEAX RCU_ethAdr~remoteIP
#debug pointer RCU_ethAdr.remoteIP
 SRC  %IB0
 LEA  RCUs_IPs
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer RCUs_IPs[RCU_Index]
 LD   4   ;SizeOf() 
 MOV  %IB0
#srcline 155 ;  end_if;
PrgRoom1_L6:
#srcline 159 ;  HMIs_Info[HMI_Index].SNo := HMI_Addresses[1];
 LDX  HMI_Addresses[0]
#debug usint HMI_Addresses[1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index].SNo
#srcline 160 ;  HMIs_Info[HMI_Index].readStAdd  := 911;
 LD   uint 911
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readStAdd
#srcline 161 ;  HMIs_Info[HMI_Index].writeStAdd := 971;
 LD   uint 971
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  3  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeStAdd
#srcline 162 ;  HMIs_Info[HMI_Index].readNoPoint  := SIZEOF(HMIs_DataRead[HMI_Index]) / 2;
 LD   104  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  5  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].readNoPoint
#srcline 163 ;  HMIs_Info[HMI_Index].writeNoPoint := SIZEOF(HMIs_DataWrite[HMI_Index]) / 2;
 LD   142  ; SizeOf()
 LD   uint 2
 DIVL
 AND  $FFFF
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 ADD  7  ; + offset 
 WRIW 
#debug_left uint HMIs_Info[HMI_Index].writeNoPoint
#srcline 164 ;  
#srcline 165 ;  for i := 1 to NumOfHMIsRoom1-1 do
 LD   usint 1
 WRX  i
 LD   usint 2
 LD   usint 1
 SUB
 AND  $FF
 WRY  P0__st__
PrgRoom1_L8:
 LDX  i
 LDY  P0__st__
 GT   
 JMD  PrgRoom1_L9
 DBG  
#srcline 166 ;    HMIs_Info[HMI_Index+i] := HMIs_Info[HMI_Index];
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_Info[HMI_Index]
 SRC  %IB0
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_Info[HMI_Index+i]
 LD   9   ;SizeOf() 
 MOV  %IB0
#srcline 167 ;    HMIs_Info[HMI_Index+i].SNo := HMI_Addresses[i+1];
 LEAX HMI_Addresses
 LDX  i
#debug usint i
 LD   usint 1
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 ADD     ; + offset 
 LDI  
#debug usint HMI_Addresses[i+1]
 LEA  HMIs_Info
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  9   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint HMIs_Info[HMI_Index+i].SNo
#srcline 168 ;  end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L8
PrgRoom1_L9:
 NOP  -1
#srcline 169 ;  
#srcline 170 ;  
#srcline 171 ;  afterRestart_TP(IN := IS_COLD_RESTART_PLC or IS_HOT_RESTART_PLC, PT := T#2s );
 LD   bool IS_COLD_RESTART_PLC
#debug bool IS_COLD_RESTART_PLC
 LD   bool IS_HOT_RESTART_PLC
#debug bool IS_HOT_RESTART_PLC
 OR  
 WRX  afterRestart_TP~IN
#debug_left bool afterRestart_TP~IN
 LD   time 2000
 WRX  afterRestart_TP~PT
#debug_left time afterRestart_TP~PT
 LEAX afterRestart_TP
 CAL  TP_L0
#srcline 172 ;  afterRestart_TP_FT(CLK := afterRestart_TP.Q);
 LDX  afterRestart_TP~Q
#debug bool afterRestart_TP.Q
 WRX  afterRestart_TP_FT~CLK
#debug_left bool afterRestart_TP_FT~CLK
 LEAX afterRestart_TP_FT
 CAL  F_TRIG_L0
#srcline 173 ;  
#srcline 174 ;  if afterRestart_TP_FT.Q then
 LDX  afterRestart_TP_FT~Q
#debug bool afterRestart_TP_FT.Q
 JMC  PrgRoom1_L10
#srcline 175 ;     SendIamServer := 1;
 LD   bool -1      ; true
 WRX  SendIamServer
#debug_left bool SendIamServer
#srcline 176 ;  end_if;
PrgRoom1_L10:
#srcline 178 ;  controlRoom(RCU_ChCode := ETH1_uni2 , RCU_PingDone := RCUs_PingDone[RCU_Index],
 LD   uint 10209
 WRX  controlRoom~RCU_ChCode
#debug_left uint controlRoom~RCU_ChCode
 LEA  RCUs_PingDone
 LDX  RCU_Index
#debug usint RCU_Index
 SUB  1   ; Low range[1]
 RCHK 4   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool RCUs_PingDone[RCU_Index]
 WRX  controlRoom~RCU_PingDone
#debug_left bool controlRoom~RCU_PingDone
#srcline 179 ;              numOfLights := NumOfLightRoom1 , numOfOutlets := NumOfOutletRoom1 , numOfCurtains := NumOfCurtainRoom1, numOfMotionSens := NumOfMotionSensRoom1,
 LD   usint 5
 WRX  controlRoom~numOfLights
#debug_left usint controlRoom~numOfLights
 LD   usint 1
 WRX  controlRoom~numOfOutlets
#debug_left usint controlRoom~numOfOutlets
 LD   usint 1
 WRX  controlRoom~numOfCurtains
#debug_left usint controlRoom~numOfCurtains
 LD   usint 2
 WRX  controlRoom~numOfMotionSens
#debug_left usint controlRoom~numOfMotionSens
#srcline 180 ;              lightsOutputDevs := lightsOutputDevs , outletOutputDevs := outletOutputDevs ,
 LEAX lightsOutputDevs
#debug pointer lightsOutputDevs
 SRC  %IB0
 LEAX controlRoom~lightsOutputDevs
 LD   51   ;SizeOf() 
 MOV  %IB0
 LEAX outletOutputDevs
#debug pointer outletOutputDevs
 SRC  %IB0
 LEAX controlRoom~outletOutputDevs
 LD   24   ;SizeOf() 
 MOV  %IB0
#srcline 181 ;              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
 LEAX curtainsUpOutputDevs
#debug pointer curtainsUpOutputDevs
 SRC  %IB0
 LEAX controlRoom~curtainsUpOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
 LEAX curtainsDwOutputDevs
#debug pointer curtainsDwOutputDevs
 SRC  %IB0
 LEAX controlRoom~curtainsDwOutputDevs
 LD   18   ;SizeOf() 
 MOV  %IB0
#srcline 182 ;              RCU_CH_IN := void(ETH1_uni2_IN) , LightsStatus := lightsStatusRoom1 ,OutletsStatus := outletsStatusRoom1, MotionSenStatus := motionSensStatus,
 LEA  ETH1_uni2_IN
 WRX  controlRoom~RCU_CH_IN
#debug_left pointer controlRoom.RCU_CH_IN
 LEA  lightsStatusRoom1
 WRX  controlRoom~LightsStatus
#debug_left pointer controlRoom.LightsStatus
 LEA  outletsStatusRoom1
 WRX  controlRoom~OutletsStatus
#debug_left pointer controlRoom.OutletsStatus
 LEAX motionSensStatus
 WRX  controlRoom~MotionSenStatus
#debug_left pointer controlRoom.MotionSenStatus
#srcline 183 ;              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := EnOutlets ,EnOutletsAN :=EnOutletsAN ,
 LEAX EnLights
 WRX  controlRoom~EnLights
#debug_left pointer controlRoom.EnLights
 LEAX EnLightsAN
 WRX  controlRoom~EnLightsAN
#debug_left pointer controlRoom.EnLightsAN
 LEAX EnOutlets
 WRX  controlRoom~EnOutlets
#debug_left pointer controlRoom.EnOutlets
 LEAX EnOutletsAN
 WRX  controlRoom~EnOutletsAN
#debug_left pointer controlRoom.EnOutletsAN
#srcline 184 ;              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus);
 LEAX SendIamServer
 WRX  controlRoom~SendIamServer
#debug_left pointer controlRoom.SendIamServer
 LEAX GetAllStatus
 WRX  controlRoom~GetAllStatus
#debug_left pointer controlRoom.GetAllStatus
 LEAX controlRoom
 CAL  fbControlRoom_L0
#srcline 187 ;   FCU[1](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_Room1[1], temp := FCU_Temp_Room1, valve := FCU_valve_Room1, fanLow := FCU_fanLow_Room1,
 LDX  enableFCU[0]
#debug bool enableFCU[1]
 WRX  FCU[0]~enable
#debug_left bool FCU[0]~enable
 LEAX settingsFCU
 LDI  
#debug usint settingsFCU[1].FCU_Mode
 WRX  FCU[0]~mode
#debug_left usint FCU[0]~mode
 LEAX settingsFCU
 ADD  1  ; + offset 
 LDI  
#debug usint settingsFCU[1].FCU_FanSpeed
 WRX  FCU[0]~fanSpeed
#debug_left usint FCU[0]~fanSpeed
 LD   setTempFCU_Room1[0]
#debug real setTempFCU_Room1[1]
 WRX  FCU[0]~setTemp
#debug_left real FCU[0]~setTemp
 LD   real FCU_Temp_Room1
#debug real FCU_Temp_Room1
 WRX  FCU[0]~temp
#debug_left real FCU[0]~temp
 LEA  FCU_valve_Room1
 WRX  FCU[0]~valve
#debug_left pointer FCU[0].valve
 LEA  FCU_fanLow_Room1
 WRX  FCU[0]~fanLow
#debug_left pointer FCU[0].fanLow
#srcline 188 ;                 fanMed := FCU_fanMed_Room1, fanHigh := FCU_fanHigh_Room1);
 LEA  FCU_fanMed_Room1
 WRX  FCU[0]~fanMed
#debug_left pointer FCU[0].fanMed
 LEA  FCU_fanHigh_Room1
 WRX  FCU[0]~fanHigh
#debug_left pointer FCU[0].fanHigh
 LEAX FCU
 CAL  fbControlFCU_L0
#srcline 193 ;   for i := 1 to NumOfLightRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 5
 WRY  P1__st__
PrgRoom1_L12:
 LDX  i
 LDY  P1__st__
 GT   
 JMD  PrgRoom1_L13
 DBG  
#srcline 194 ;       HMIs_DataWrite[HMI_Index].lightsStatus[i] := BOOL_TO_WORD(lightsStatusRoom1[i]);
 LEA  lightsStatusRoom1
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool lightsStatusRoom1[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].lightsStatus[i]
#srcline 195 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L12
PrgRoom1_L13:
 NOP  -1
#srcline 197 ;   for i := 1 to NumOfOutletRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P2__st__
PrgRoom1_L14:
 LDX  i
 LDY  P2__st__
 GT   
 JMD  PrgRoom1_L15
 DBG  
#srcline 198 ;       HMIs_DataWrite[HMI_Index].outletsStatus[i] := BOOL_TO_WORD(outletsStatusRoom1[i]);
 LEA  outletsStatusRoom1
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool outletsStatusRoom1[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].outletsStatus[i]
#srcline 199 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L14
PrgRoom1_L15:
 NOP  -1
#srcline 201 ;   for i := 1 to NumOfMotionSensRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 2
 WRY  P3__st__
PrgRoom1_L16:
 LDX  i
 LDY  P3__st__
 GT   
 JMD  PrgRoom1_L17
 DBG  
#srcline 202 ;       HMIs_DataWrite[HMI_Index].motionSensStatus[i] := BOOL_TO_WORD(motionSensStatus[i]);
 LEAX motionSensStatus
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool motionSensStatus[i]
 AND  1
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 3   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].motionSensStatus[i]
#srcline 203 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L16
PrgRoom1_L17:
 NOP  -1
#srcline 204 ;   
#srcline 205 ;   for i := 1 to NumOfFCUsRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P4__st__
PrgRoom1_L18:
 LDX  i
 LDY  P4__st__
 GT   
 JMD  PrgRoom1_L19
 DBG  
#srcline 206 ;      HMIs_DataWrite[HMI_Index].FCUs_Status[i] := FCU[i].FCU_Status;
 LEAX FCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  66   ; SizeOf(...)
 ADD     ; + offset 
 ADD  11  ; + offset 
#debug pointer FCU[i].FCU_Status
 SRC  %IB0
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  94  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  16   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_DataWrite[HMI_Index].FCUs_Status[i]
 LD   16   ;SizeOf() 
 MOV  %IB0
#srcline 207 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L18
PrgRoom1_L19:
 NOP  -1
#srcline 208 ;   
#srcline 209 ;   if NumOfCurtainRoom1 > 0 then
 LD   usint 1
 LD   usint 0
 GT
 JMC  PrgRoom1_L20
#srcline 210 ;      for i := 1 to NumOfCurtainRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P5__st__
PrgRoom1_L22:
 LDX  i
 LDY  P5__st__
 GT   
 JMD  PrgRoom1_L23
 DBG  
#srcline 211 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].UP.0 := curtainsStatus[CurtStatus_Index - 1 + i].outUP;
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool HMIs_DataWrite[HMI_Index].shuttersStatus[i].UP.0
#srcline 212 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].Dw.0 := curtainsStatus[CurtStatus_Index - 1 + i].outDW;
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool HMIs_DataWrite[HMI_Index].shuttersStatus[i].Dw.0
#srcline 213 ;          HMIs_DataWrite[HMI_Index].shuttersStatus[i].pos  := USINT_TO_WORD(curtainsStatus[CurtStatus_Index - 1 + i].pos);
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 LDI  
#debug usint curtainsStatus[CurtStatus_Index-1+i].pos
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
 ADD  58  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  6   ; SizeOf(...)
 ADD     ; + offset 
 ADD  4  ; + offset 
 WRIW 
#debug_left word HMIs_DataWrite[HMI_Index].shuttersStatus[i].pos
#srcline 214 ;      end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L22
PrgRoom1_L23:
 NOP  -1
#srcline 215 ;   end_if;
PrgRoom1_L20:
#srcline 216 ;   
#srcline 217 ;   
#srcline 218 ;   
#srcline 219 ;   for i := 1 to NumOfHMIsRoom1-1 do
 LD   usint 1
 WRX  i
 LD   usint 2
 LD   usint 1
 SUB
 AND  $FF
 WRY  P6__st__
PrgRoom1_L24:
 LDX  i
 LDY  P6__st__
 GT   
 JMD  PrgRoom1_L25
 DBG  
#srcline 220 ;     HMIs_DataWrite[HMI_Index+i] := HMIs_DataWrite[HMI_Index];
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug pointer HMIs_DataWrite[HMI_Index]
 SRC  %IB0
 LEA  HMIs_DataWrite
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  142   ; SizeOf(...)
 ADD     ; + offset 
#debug_left pointer HMIs_DataWrite[HMI_Index+i]
 LD   142   ;SizeOf() 
 MOV  %IB0
#srcline 221 ;   end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L24
PrgRoom1_L25:
 NOP  -1
#srcline 222 ;   
#srcline 226 ;   for j := 1 to NumOfHMIsRoom1 do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P7__st__
PrgRoom1_L26:
 LDX  j
 LDY  P7__st__
 GT   
 JMD  PrgRoom1_L27
 DBG  
#srcline 227 ;     for i := 1 to NumOfLightRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 5
 WRY  P8__st__
PrgRoom1_L28:
 LDX  i
 LDY  P8__st__
 GT   
 JMD  PrgRoom1_L29
 DBG  
#srcline 229 ;         enLights_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P9__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P9__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P9__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 231 ;         enLights_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P10__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enLights[i]
 LDY  P10__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P10__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 233 ;         if enLights_RT[j,i].Q or enLights_FT[j,i].Q then
 LEAX enLights_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_RT[j,i].Q
 LEAX enLights_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  5   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 4   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enLights_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L30
#srcline 234 ;            EnLights[i] := 1;
 LD   bool -1      ; true
 LEAX EnLights
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 16   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnLights[i]
#srcline 235 ;         end_if;
PrgRoom1_L30:
#srcline 236 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L28
PrgRoom1_L29:
 NOP  -1
#srcline 237 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgRoom1_L26
PrgRoom1_L27:
 NOP  -1
#srcline 239 ;   for j := 1 to NumOfHMIsRoom1 do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P11__st__
PrgRoom1_L32:
 LDX  j
 LDY  P11__st__
 GT   
 JMD  PrgRoom1_L33
 DBG  
#srcline 240 ;     for i := 1 to NumOfOutletRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P12__st__
PrgRoom1_L34:
 LDX  i
 LDY  P12__st__
 GT   
 JMD  PrgRoom1_L35
 DBG  
#srcline 242 ;         enOutlets_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P13__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P13__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P13__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 244 ;         enOutlets_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P14__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  34  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enOutlets[i]
 LDY  P14__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P14__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 246 ;         if enOutlets_RT[j,i].Q or enOutlets_FT[j,i].Q then
 LEAX enOutlets_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_RT[j,i].Q
 LEAX enOutlets_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enOutlets_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L36
#srcline 247 ;            EnOutlets[i] := 1;
 LD   bool -1      ; true
 LEAX EnOutlets
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 7   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool EnOutlets[i]
#srcline 248 ;         end_if;
PrgRoom1_L36:
#srcline 249 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L34
PrgRoom1_L35:
 NOP  -1
#srcline 250 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgRoom1_L32
PrgRoom1_L33:
 NOP  -1
#srcline 251 ;   
#srcline 252 ;   
#srcline 253 ;   for j := 1 to NumOfHMIsRoom1 do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P15__st__
PrgRoom1_L38:
 LDX  j
 LDY  P15__st__
 GT   
 JMD  PrgRoom1_L39
 DBG  
#srcline 254 ;     for i := 1 to NumOfCurtainRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P16__st__
PrgRoom1_L40:
 LDX  i
 LDY  P16__st__
 GT   
 JMD  PrgRoom1_L41
 DBG  
#srcline 256 ;         enCurtainsUP_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P17__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P17__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P17__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 258 ;         enCurtainsUP_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P18__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].UP.0
 LDY  P18__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P18__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 259 ;         
#srcline 260 ;         enCurtainsDW_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P19__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P19__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P19__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 262 ;         enCurtainsDW_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P20__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  50  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enShutters[i].Dw.0
 LDY  P20__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P20__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 263 ;         
#srcline 264 ;         //
#srcline 265 ;         enCurtainsUP_SW_RT[i](CLK := controlRoom.SwitchUPStatus[i]);
 LEAX enCurtainsUP_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRY  P21__st__  ; offset instance
 LEAX controlRoom
 ADD  418  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchUPStatus[i]
 LDY  P21__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P21__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 266 ;         enCurtainsUP_SW_FT[i](CLK := controlRoom.SwitchUPStatus[i]);
 LEAX enCurtainsUP_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRY  P22__st__  ; offset instance
 LEAX controlRoom
 ADD  418  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchUPStatus[i]
 LDY  P22__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P22__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 267 ;         
#srcline 268 ;         enCurtainsDW_SW_RT[i](CLK := controlRoom.SwitchDWStatus[i]);
 LEAX enCurtainsDW_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRY  P23__st__  ; offset instance
 LEAX controlRoom
 ADD  419  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchDWStatus[i]
 LDY  P23__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P23__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 269 ;         enCurtainsDW_SW_FT[i](CLK := controlRoom.SwitchDWStatus[i]);
 LEAX enCurtainsDW_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRY  P24__st__  ; offset instance
 LEAX controlRoom
 ADD  419  ; + offset 
 MUL  8   ; -> bool pointer 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 5   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool controlRoom.SwitchDWStatus[i]
 LDY  P24__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P24__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 270 ;         
#srcline 271 ;         if  enCurtainsUP_RT[j,i].Q  or enCurtainsUP_FT[j,i].Q then
 LEAX enCurtainsUP_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_RT[j,i].Q
 LEAX enCurtainsUP_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L42
#srcline 272 ;             enCurtainsUP_GUI[i] := 1;
 LD   bool -1      ; true
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 273 ;         end_if;
PrgRoom1_L42:
#srcline 274 ;         
#srcline 275 ;         if  enCurtainsDW_RT[j,i].Q  or enCurtainsDW_FT[j,i].Q then
 LEAX enCurtainsDW_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_RT[j,i].Q
 LEAX enCurtainsDW_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L44
#srcline 276 ;             enCurtainsDW_GUI[i] := 1;
 LD   bool -1      ; true
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 277 ;         end_if;
PrgRoom1_L44:
#srcline 278 ;         
#srcline 279 ;         // if up button is pressed and the curtain is not moving up
#srcline 280 ;         
#srcline 281 ;         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outUP then
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsUP_GUI[i]
 LEAX enCurtainsUP_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_SW_RT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 NEG
 AND
 JMC  PrgRoom1_L46
#srcline 282 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 1;
 LD   bool -1      ; true
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].UP
#srcline 283 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].DW
#srcline 284 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 285 ;             
#srcline 286 ;             enCurtainsUP_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 287 ;         end_if;
PrgRoom1_L46:
#srcline 288 ;         
#srcline 289 ;         // if up button is pressed and the curtain is moving up
#srcline 290 ;         
#srcline 291 ;         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outUP then
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsUP_GUI[i]
 LEAX enCurtainsUP_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsUP_SW_FT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outUP
 AND
 JMC  PrgRoom1_L48
#srcline 292 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].UP
#srcline 293 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].DW
#srcline 294 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;
 LD   bool -1      ; true
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 296 ;             enCurtainsUP_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsUP_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsUP_GUI[i]
#srcline 297 ;         end_if;
PrgRoom1_L48:
#srcline 298 ;         
#srcline 299 ;         
#srcline 300 ;          // if down button is pressed and the curtain is not moving down
#srcline 302 ;         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outDW then
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsDW_GUI[i]
 LEAX enCurtainsDW_SW_RT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_SW_RT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 NEG
 AND
 JMC  PrgRoom1_L50
#srcline 303 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].UP
#srcline 304 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 1;
 LD   bool -1      ; true
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].DW
#srcline 305 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 307 ;             enCurtainsDW_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 308 ;         end_if;
PrgRoom1_L50:
#srcline 310 ;         // if down button is pressed and the curtain is moving down
#srcline 312 ;         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outDW then
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 LDIB 
#debug bool enCurtainsDW_GUI[i]
 LEAX enCurtainsDW_SW_FT
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enCurtainsDW_SW_FT[i].Q
 OR  
 LEA  curtainsStatus
 LDX  CurtStatus_Index
#debug usint CurtStatus_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 MUL  3   ; SizeOf(...)
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool curtainsStatus[CurtStatus_Index-1+i].outDW
 AND
 JMC  PrgRoom1_L52
#srcline 313 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].UP
#srcline 314 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
 LD   bool 0       ; false
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].DW
#srcline 315 ;             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;
 LD   bool -1      ; true
 LEA  PLC1_EnCurtains
 LDX  CurtEn_Index
#debug usint CurtEn_Index
 LD   usint 1
 SUB
 AND  $FF
 LDX  i
#debug usint i
 ADD
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 13   ; Range Check
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 WRIB 
#debug_left bool PLC1_EnCurtains[CurtEn_Index-1+i].STOP
#srcline 317 ;             enCurtainsDW_GUI[i] := 0;
 LD   bool 0       ; false
 LEAX enCurtainsDW_GUI
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enCurtainsDW_GUI[i]
#srcline 318 ;         end_if;
PrgRoom1_L52:
#srcline 320 ;     end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L40
PrgRoom1_L41:
 NOP  -1
#srcline 321 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgRoom1_L38
PrgRoom1_L39:
 NOP  -1
#srcline 322 ;   
#srcline 323 ;   for j := 1 to NumOfHMIsRoom1 do
 LD   usint 1
 WRX  j
 LD   usint 2
 WRY  P25__st__
PrgRoom1_L54:
 LDX  j
 LDY  P25__st__
 GT   
 JMD  PrgRoom1_L55
 DBG  
#srcline 324 ;      for i := 1 to NumOfFCUsRoom1 do
 LD   usint 1
 WRX  i
 LD   usint 1
 WRY  P26__st__
PrgRoom1_L56:
 LDX  i
 LDY  P26__st__
 GT   
 JMD  PrgRoom1_L57
 DBG  
#srcline 325 ;          enFCUs_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
 LEAX enFCUs_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P27__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].onOff
 LDY  P27__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P27__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 326 ;          enFCUs_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
 LEAX enFCUs_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P28__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].onOff
 LDY  P28__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P28__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 327 ;          
#srcline 328 ;          if enFCUs_FT[j,i].Q then
 LEAX enFCUs_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUs_FT[j,i].Q
 JMC  PrgRoom1_L58
#srcline 329 ;             enableFCU[i] := 0;
 LD   bool 0       ; false
 LEAX enableFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enableFCU[i]
#srcline 330 ;          end_if;
PrgRoom1_L58:
#srcline 331 ;          if enFCUs_RT[j,i].Q then
 LEAX enFCUs_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUs_RT[j,i].Q
 JMC  PrgRoom1_L60
#srcline 332 ;             enableFCU[i] := 1;
 LD   bool -1      ; true
 LEAX enableFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 ADD     ; + offset 
 WRIB 
#debug_left bool enableFCU[i]
#srcline 333 ;          end_if;
PrgRoom1_L60:
#srcline 334 ;          
#srcline 335 ;          enFanAuto_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed = 8));
 LEAX enFanAuto_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P29__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed
 LD   word 8
 EQ
 LDY  P29__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P29__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 336 ;          enFanLow_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.0);
 LEAX enFanLow_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P30__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.0
 LDY  P30__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P30__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 337 ;          enFanMed_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.1);
 LEAX enFanMed_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P31__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.1
 LDY  P31__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P31__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 338 ;          enFanHigh_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.2);
 LEAX enFanHigh_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P32__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  6  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  2   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].fanSpeed.2
 LDY  P32__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P32__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 339 ;          
#srcline 340 ;          if enFanAuto_RT[j,i].Q then
 LEAX enFanAuto_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanAuto_RT[j,i].Q
 JMC  PrgRoom1_L62
#srcline 341 ;             settingsFCU[i].FCU_FanSpeed := auto;
 LD   udint 0  ; TFCU_FanSpeed#auto
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 342 ;          end_if;
PrgRoom1_L62:
#srcline 343 ;          if enFanLow_RT[j,i].Q then
 LEAX enFanLow_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanLow_RT[j,i].Q
 JMC  PrgRoom1_L64
#srcline 344 ;             settingsFCU[i].FCU_FanSpeed := low;
 LD   udint 1  ; TFCU_FanSpeed#low
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 345 ;          end_if;
PrgRoom1_L64:
#srcline 346 ;          if enFanMed_RT[j,i].Q then
 LEAX enFanMed_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanMed_RT[j,i].Q
 JMC  PrgRoom1_L66
#srcline 347 ;             settingsFCU[i].FCU_FanSpeed := med;
 LD   udint 2  ; TFCU_FanSpeed#med
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 348 ;          end_if;
PrgRoom1_L66:
#srcline 349 ;          if enFanHigh_RT[j,i].Q then
 LEAX enFanHigh_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFanHigh_RT[j,i].Q
 JMC  PrgRoom1_L68
#srcline 350 ;             settingsFCU[i].FCU_FanSpeed := high;
 LD   udint 3  ; TFCU_FanSpeed#high
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 ADD  1  ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_FanSpeed
#srcline 351 ;          end_if;
PrgRoom1_L68:
#srcline 352 ;          
#srcline 353 ;          enFCUCool_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode = 0));
 LEAX enFCUCool_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P33__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  8  ; + offset 
 LDIW 
#debug word HMIs_DataRead[HMI_Index+j-1].enFCUs[i].mode
 LD   word 0
 EQ
 LDY  P33__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P33__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 354 ;          enFCUFanOnly_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode.0);
 LEAX enFCUFanOnly_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P34__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  8  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].mode.0
 LDY  P34__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P34__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 355 ;          
#srcline 356 ;          if enFCUCool_RT[j,i].Q then
 LEAX enFCUCool_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUCool_RT[j,i].Q
 JMC  PrgRoom1_L70
#srcline 357 ;             settingsFCU[i].FCU_Mode := cooling;
 LD   udint 0  ; TFCU_Mode#cooling
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_Mode
#srcline 358 ;          end_if;
PrgRoom1_L70:
#srcline 359 ;          if enFCUFanOnly_RT[j,i].Q then
 LEAX enFCUFanOnly_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enFCUFanOnly_RT[j,i].Q
 JMC  PrgRoom1_L72
#srcline 360 ;             settingsFCU[i].FCU_Mode := fanOnly;
 LD   udint 1  ; TFCU_Mode#fanOnly
 LEAX settingsFCU
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  2   ; SizeOf(...)
 ADD     ; + offset 
 WRI 
#debug_left usint settingsFCU[i].FCU_Mode
#srcline 361 ;          end_if;
PrgRoom1_L72:
#srcline 362 ;          
#srcline 363 ;          enSetTempIncr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
 LEAX enSetTempIncr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P35__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.0
 LDY  P35__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P35__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 364 ;          enSetTempIncr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
 LEAX enSetTempIncr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P36__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.0
 LDY  P36__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P36__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 365 ;          
#srcline 366 ;          if enSetTempIncr_RT[j,i].Q or enSetTempIncr_FT[j,i].Q then
 LEAX enSetTempIncr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempIncr_RT[j,i].Q
 LEAX enSetTempIncr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempIncr_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L74
#srcline 367 ;             setTempFCU_Room1[j] := setTempFCU_Room1[j] + 0.5;
 LEA  setTempFCU_Room1
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 LDIL 
#debug real setTempFCU_Room1[j]
 LD   real 0.5
 ADF
 LEA  setTempFCU_Room1
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 WRIL 
#debug_left real setTempFCU_Room1[j]
#srcline 368 ;          end_if;
PrgRoom1_L74:
#srcline 369 ;          
#srcline 370 ;          enSetTempDecr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
 LEAX enSetTempDecr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P37__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.1
 LDY  P37__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P37__st__  ; offset instance
 CAL  R_TRIG_L0
#srcline 371 ;          enSetTempDecr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
 LEAX enSetTempDecr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 WRY  P38__st__  ; offset instance
 LEA  HMIs_DataRead
 LDX  HMI_Index
#debug usint HMI_Index
 LDX  j
#debug usint j
 ADD
 AND  $FF
 LD   usint 1
 SUB
 AND  $FF
 SUB  1   ; Low range[1]
 RCHK 9   ; Range Check
 MUL  104   ; SizeOf(...)
 ADD     ; + offset 
 ADD  74  ; + offset 
 LDX  i
#debug usint i
 SUB  1   ; Low range[1]
 RCHK 2   ; Range Check
 MUL  10   ; SizeOf(...)
 ADD     ; + offset 
 ADD  2  ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool HMIs_DataRead[HMI_Index+j-1].enFCUs[i].SetTempCtrl.1
 LDY  P38__st__  ; offset instance
 MUL  8   ; -> bool pointer 
 WRIB 
 LDY  P38__st__  ; offset instance
 CAL  F_TRIG_L0
#srcline 373 ;          if enSetTempDecr_RT[j,i].Q or enSetTempDecr_FT[j,i].Q then
 LEAX enSetTempDecr_RT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempDecr_RT[j,i].Q
 LEAX enSetTempDecr_FT
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 1   ; Range Check
 MUL  1   ; Num items[2]
 LDX  i
#debug usint i
 SUB  1  ; Low range[2]
 RCHK 0   ; Range Check
 ADD
 ADD     ; + offset 
 MUL  8   ; -> bool pointer 
 ADD  1   ; Bool offset 
 LDIB 
#debug bool enSetTempDecr_FT[j,i].Q
 OR  
 JMC  PrgRoom1_L76
#srcline 374 ;             setTempFCU_Room1[j] := setTempFCU_Room1[j] - 0.5;
 LEA  setTempFCU_Room1
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 LDIL 
#debug real setTempFCU_Room1[j]
 LD   real 0.5
 SUF
 LEA  setTempFCU_Room1
 LDX  j
#debug usint j
 SUB  1   ; Low range[1]
 RCHK 0   ; Range Check
 MUL  4   ; SizeOf(...)
 ADD     ; + offset 
 WRIL 
#debug_left real setTempFCU_Room1[j]
#srcline 375 ;          end_if;
PrgRoom1_L76:
#srcline 376 ;          
#srcline 377 ;      end_for;
 LDX  i
 LD   1
 ADD  
 WRX  i
 JMP  PrgRoom1_L56
PrgRoom1_L57:
 NOP  -1
#srcline 378 ;   end_for;
 LDX  j
 LD   1
 ADD  
 WRX  j
 JMP  PrgRoom1_L54
PrgRoom1_L55:
 NOP  -1
#srcline 379 ;   
#srcline 381 ;END_PROGRAM
 ULNK
RET
E     61

; Initialize - variables
P     61
PrgRoom1__InstanceInit__:
 LINK 0
 LD   0
 SRC  byte __Init___PrgRoom1_RCU_IP
 LEAX byte RCU_IP
 LD   4
 MOV  %X0
 LEAX controlRoom
 CAL  fbControlRoom__InstanceInit__
 LD   0
 SRC  byte __Init___PrgRoom1_lightsOutputDevs
 LEAX byte lightsOutputDevs
 LD   51
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_outletOutputDevs
 LEAX byte outletOutputDevs
 LD   24
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_curtainsUpOutputDevs
 LEAX byte curtainsUpOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_curtainsDwOutputDevs
 LEAX byte curtainsDwOutputDevs
 LD   18
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_motionSensOutputDevs
 LEAX byte motionSensOutputDevs
 LD   12
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enLights_FT
 LEAX byte enLights_FT[0]
 LD   10
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enOutlets_FT
 LEAX byte enOutlets_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enCurtainsUP_FT
 LEAX byte enCurtainsUP_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enCurtainsDW_FT
 LEAX byte enCurtainsDW_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enCurtainsUP_SW_FT
 LEAX byte enCurtainsUP_SW_FT[0]
 LD   1
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enCurtainsDW_SW_FT
 LEAX byte enCurtainsDW_SW_FT[0]
 LD   1
 MOV  %X0
 LEAX afterRestart_TP_FT
 CAL  F_TRIG__InstanceInit__
 LD   0
 SRC  byte __Init___PrgRoom1_enFCUs_FT
 LEAX byte enFCUs_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enSetTempIncr_FT
 LEAX byte enSetTempIncr_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_enSetTempDecr_FT
 LEAX byte enSetTempDecr_FT[0]
 LD   2
 MOV  %X0
 LD   0
 SRC  byte __Init___PrgRoom1_HMI_Addresses
 LEAX byte HMI_Addresses[0]
 LD   2
 MOV  %X0
 ULNK
RET
E     61
; End initialize - variables
#endpou 


P     59
; Initialize retain global variables 
 LD   0
 SRC  byte __Init____setTempFCU_Room1
 LD   0
 LD   4
 MOV  byte setTempFCU_Room1[0]
E     59

 

#srcfile ''
