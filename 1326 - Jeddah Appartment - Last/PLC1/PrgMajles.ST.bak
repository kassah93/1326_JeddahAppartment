VAR_GLOBAL CONSTANT
   NumOfLightMajles      : USINT := 15;
   NumOfOutletMajles     : USINT := 1;
   NumOfCurtainMajles    : USINT := 5;
   NumOfMotionSensMajles : USINT := 1;
   NumOfFCUsMajles       : USINT := 2;
   NumOfHMIsMajles       : USINT := 4;
END_VAR

VAR_GLOBAL RETAIN
   lightsStatusMajles  {PUBLIC_API} : TLightsStatus;
   outletsStatusMajles {PUBLIC_API} : TOutletsStatus;
   setTempFCU_Majles  : Array[1..NumOfFCUsMajles] of REAL := [20, 20];
   
END_VAR


PROGRAM PrgMajles

  VAR
  //WebMaker
  lightsSelect   : BOOL;
  socketsSelect  : BOOL;
  shuttersSelect : BOOL;
  AC_Select      : BOOL;
  navSelect      : usint;

  //RCU
  RCU1_ethAdr   : TRemoteEthAdr;
  RCU2_ethAdr   : TRemoteEthAdr;
  
  RCU_IP : TIPadr := [192, 168, 0, 23];
  RCU_Ch_localPort : UINT;
  Set_IP           : BOOL;
  GetAllStatus  : BOOL;
  SendIamServer : BOOL;

  //controlRoom
  controlRoomRCU1   : fbControlRoom ;
  controlRoomRCU2   : fbControlRoom ;
  
  lightsOutputDevs     : TlightsOutputDevs     := [(DevAddress := 1 , loopAddress := 1),(DevAddress := 1 , loopAddress := 2),(DevAddress := 1 , loopAddress := 3),
                                                   (DevAddress := 1 , loopAddress := 4),(DevAddress := 1 , loopAddress := 5),(DevAddress := 1 , loopAddress := 6),
                                                   (DevAddress := 1 , loopAddress := 7),(DevAddress := 1 , loopAddress := 8),(DevAddress := 1 , loopAddress := 9),
                                                   (DevAddress := 1 , loopAddress := 10),(DevAddress := 2 , loopAddress := 1),(DevAddress := 2 , loopAddress := 2),
                                                   (DevAddress := 2 , loopAddress := 3),(DevAddress := 2 , loopAddress := 4),(DevAddress := 2 , loopAddress := 5)];

  outletOutputDevsRCU1 : ToutletOutputDevs     := [(DevAddress := 2 , loopAddress := 6)];
  
  outletOutputDevsRCU2 : ToutletOutputDevs ;

  curtainsUpOutputDevs : TcurtainsUpOutputDevs := [(DevAddress := 1 , loopAddress := 2),(DevAddress := 1 , loopAddress := 4),(DevAddress := 1 , loopAddress := 6),
                                                   (DevAddress := 1 , loopAddress := 8),(DevAddress := 2 , loopAddress := 1)];
                                                   
  curtainsDwOutputDevs : TcurtainsDwOutputDevs := [(DevAddress := 1 , loopAddress := 3),(DevAddress := 1 , loopAddress := 5),(DevAddress := 1 , loopAddress := 7),
                                                   (DevAddress := 1 , loopAddress := 9),(DevAddress := 2 , loopAddress := 2)];

  motionSensOutputDevs : TMotionSensOutputDevs := [(DevAddress := 1 , loopAddress := 1)];


  EnLights                            : TEnLights     ;
  EnLightsAN       {PUBLIC_API}       : TEnLightsAN   ;
  EnOutlets                           : TEnOutlets    ;
  EnOutletsAN      {PUBLIC_API}       : TEnOutletsAN  ;
  EnCurtainsUp     {PUBLIC_API}       : TEnCurtainsUp ;
  EnCurtainsDw     {PUBLIC_API}       : TEnCurtainsDW ;


  //
  enLights_RT  : Array[1..NumOfHMIsMajles,1..NumOfLightMajles] of R_TRIG;
  enLights_FT  : Array[1..NumOfHMIsMajles,1..NumOfLightMajles] of F_TRIG;

  enOutlets_RT : Array[1..NumOfHMIsMajles,1..NumOfOutletMajles] of R_TRIG;
  enOutlets_FT : Array[1..NumOfHMIsMajles,1..NumOfOutletMajles] of F_TRIG;


  // HMIs
  enCurtainsUP_RT : Array[1..NumOfHMIsMajles,1..NumOfCurtainMajles] of R_TRIG;
  enCurtainsUP_FT : Array[1..NumOfHMIsMajles,1..NumOfCurtainMajles] of F_TRIG;

  enCurtainsDW_RT : Array[1..NumOfHMIsMajles,1..NumOfCurtainMajles] of R_TRIG;
  enCurtainsDW_FT : Array[1..NumOfHMIsMajles,1..NumOfCurtainMajles] of F_TRIG;


  // RCU Switches
  enCurtainsUP_SW_RT : Array[1..NumOfCurtainMajles] of R_TRIG;
  enCurtainsUP_SW_FT : Array[1..NumOfCurtainMajles] of F_TRIG;

  enCurtainsDW_SW_RT : Array[1..NumOfCurtainMajles] of R_TRIG;
  enCurtainsDW_SW_FT : Array[1..NumOfCurtainMajles] of F_TRIG;

  // GUI
  enCurtainsUP_GUI : Array[1..NumOfCurtainMajles] of BOOL;
  enCurtainsDW_GUI : Array[1..NumOfCurtainMajles] of BOOL;

  CurtStatus_Index : USINT;
  CurtEn_Index     : USINT;


  //
  i , j : USINT;
  afterRestart_TP : TP;
  afterRestart_TP_FT : F_TRIG;

  //
  motionSensStatus                : TMotionSensStatus;
  CurtainsUpStatus   {PUBLIC_API} : TCurtainsUpStatus;
  CurtainsDwStatus   {PUBLIC_API} : TCurtainsDwStatus;

  // FCU VARS
  FCU          : Array[1..NumOfFCUsMajles] of fbControlFCU;
  enableFCU    : Array[1..NumOfFCUsMajles] of BOOL;
  settingsFCU  : Array[1..NumOfFCUsMajles] of TFCU_Settings;

  //modeFCU      : Array[1..NumOfFCUsMajles] of TFCU_Mode;
  //fanSpeedFCU  : Array[1..NumOfFCUsMajles] of TFCU_FanSpeed;

  enFCUs_FT    : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of F_TRIG;
  enFCUs_RT    : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;

  enFanHigh_RT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enFanMed_RT  : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enFanLow_RT  : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enFanAuto_RT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;

  enFCUCool_RT    : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enFCUFanOnly_RT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;

  enSetTempIncr_RT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enSetTempIncr_FT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of F_TRIG;

  enSetTempDecr_RT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of R_TRIG;
  enSetTempDecr_FT : Array[1..NumOfHMIsMajles,1..NumOfFCUsMajles] of F_TRIG;

  //HMIs[1..num
  HMI_Index : USINT;
  RCU_Index : USINT;
  HMI_Addresses : Array[1..NumOfHMIsMajles] of USINT := [12, 13, 14, 15];

  END_VAR

   if navSelect = 0 then
     lightsSelect   := 1;
     socketsSelect  := 0;
     shuttersSelect := 0;
     AC_Select      := 0;
  elsif navSelect = 1 then
     lightsSelect   := 0;
     socketsSelect  := 1;
     shuttersSelect := 0;
     AC_Select      := 0;
  elsif navSelect = 2 then
     lightsSelect   := 0;
     socketsSelect  := 0;
     shuttersSelect := 1;
     AC_Select      := 0;
  elsif navSelect = 3 then
     lightsSelect   := 0;
     socketsSelect  := 0;
     shuttersSelect := 0;
     AC_Select      := 1;
  end_if;

   HMI_Index := 1;
   RCU_Index := 1;
   CurtStatus_Index := 1;
   CurtEn_Index  := 1;
   
   
   if GetRemoteIPaddress(chanCode := Eth1_uni0, ethAdr := RCU1_ethAdr) then
     RCUs_IPs[RCU_Index] := RCU1_ethAdr.remoteIP;
   end_if;
   
   if GetRemoteIPaddress(chanCode := Eth1_uni1, ethAdr := RCU2_ethAdr) then
     RCUs_IPs[RCU_Index + 1] := RCU2_ethAdr.remoteIP;
   end_if;



  HMIs_Info[HMI_Index].SNo := HMI_Addresses[1];
  HMIs_Info[HMI_Index].readStAdd  := 1;
  HMIs_Info[HMI_Index].writeStAdd := 61;
  HMIs_Info[HMI_Index].readNoPoint  := SIZEOF(HMIs_DataRead[HMI_Index]) / 2;
  HMIs_Info[HMI_Index].writeNoPoint := SIZEOF(HMIs_DataWrite[HMI_Index]) / 2;

  for i := 1 to NumOfHMIsMajles-1 do
    HMIs_Info[HMI_Index+i] := HMIs_Info[HMI_Index];
    HMIs_Info[HMI_Index+i].SNo := HMI_Addresses[i+1];
  end_for;


  afterRestart_TP(IN := IS_COLD_RESTART_PLC or IS_HOT_RESTART_PLC, PT := T#2s );
  afterRestart_TP_FT(CLK := afterRestart_TP.Q);

  if afterRestart_TP_FT.Q then
     SendIamServer := 1;
  end_if;

  controlRoomRCU1(RCU_ChCode := ETH1_uni0 , RCU_PingDone := RCUs_PingDone[RCU_Index],
              numOfLights := NumOfLightMajles , numOfOutlets := NumOfOutletMajles , numOfCurtains := 0, numOfMotionSens := NumOfMotionSensMajles,
              lightsOutputDevs := lightsOutputDevs , outletOutputDevs := outletOutputDevsRCU1 ,
              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
              RCU_CH_IN := void(ETH1_uni0_IN) , LightsStatus := lightsStatusMajles ,OutletsStatus := outletsStatusMajles, MotionSenStatus := motionSensStatus,
              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := EnOutlets ,EnOutletsAN :=EnOutletsAN ,
              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus );
              
  controlRoomRCU2(RCU_ChCode := ETH1_uni1 , RCU_PingDone := RCUs_PingDone[RCU_Index + 1],
              numOfLights := 0 , numOfOutlets := 0 , numOfCurtains := NumOfCurtainMajles, numOfMotionSens := 0,
              outletOutputDevs := outletOutputDevsRCU2,
              curtainsUpOutputDevs := curtainsUpOutputDevs , curtainsDwOutputDevs := curtainsDwOutputDevs,
              RCU_CH_IN := void(ETH1_uni1_IN) , LightsStatus := lightsStatusMajles ,OutletsStatus := void(outletsStatusMajles[6]), MotionSenStatus := motionSensStatus,
              EnLights := EnLights , EnLightsAN := EnLightsAN , EnOutlets := void(EnOutlets[6]) ,EnOutletsAN := void(EnOutletsAN[6]) ,
              SendIamServer := SendIamServer , GetAllStatus := GetAllStatus );

              //stLightsMajlesAN := lightsStatusMajles[1];


   FCU[1](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_Majles[1], temp := FCU_Temp_Majles1, valve := FCU_valve_Majles1, fanLow := FCU_fanLow_Majles1,
                 fanMed := FCU_fanMed_Majles1, fanHigh := FCU_fanHigh_Majles1);
                 
   FCU[2](enable := enableFCU[1], mode := settingsFCU[1].FCU_Mode, fanSpeed := settingsFCU[1].FCU_FanSpeed, setTemp := setTempFCU_Majles[1], temp := FCU_Temp_Majles1, valve := FCU_valve_Majles2, fanLow := FCU_fanLow_Majles2,
                 fanMed := FCU_fanMed_Majles2, fanHigh := FCU_fanHigh_Majles2);





   for i := 1 to NumOfLightMajles do
       HMIs_DataWrite[HMI_Index].lightsStatus[i] := BOOL_TO_WORD(lightsStatusMajles[i]);
   end_for;

   for i := 1 to NumOfOutletMajles do
       HMIs_DataWrite[HMI_Index].outletsStatus[i] := BOOL_TO_WORD(outletsStatusMajles[i]);
   end_for;

   for i := 1 to NumOfMotionSensMajles do
       HMIs_DataWrite[HMI_Index].motionSensStatus[i] := BOOL_TO_WORD(motionSensStatus[i]);
   end_for;
   
   for i := 1 to NumOfFCUsMajles do
      HMIs_DataWrite[HMI_Index].FCUs_Status[i] := FCU[i].FCU_Status;
   end_for;

   if NumOfCurtainMajles > 0 then
      for i := 1 to NumOfCurtainMajles do
          HMIs_DataWrite[HMI_Index].shuttersStatus[i].UP.0 := curtainsStatus[CurtStatus_Index - 1 + i].outUP;
          HMIs_DataWrite[HMI_Index].shuttersStatus[i].Dw.0 := curtainsStatus[CurtStatus_Index - 1 + i].outDW;
          HMIs_DataWrite[HMI_Index].shuttersStatus[i].pos  := USINT_TO_WORD(curtainsStatus[CurtStatus_Index - 1 + i].pos);
      end_for;
   end_if;


   for i := 1 to NumOfHMIsMajles-1 do
     HMIs_DataWrite[HMI_Index+i] := HMIs_DataWrite[HMI_Index];
   end_for;


   for j := 1 to NumOfHMIsMajles do
     for i := 1 to NumOfLightMajles do

         enLights_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);

         enLights_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enLights[i]);

         if enLights_RT[j,i].Q or enLights_FT[j,i].Q then
            EnLights[i] := 1;
         end_if;
     end_for;
   end_for;

   for j := 1 to NumOfHMIsMajles do
     for i := 1 to NumOfOutletMajles do

         enOutlets_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);

         enOutlets_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enOutlets[i]);

         if enOutlets_RT[j,i].Q or enOutlets_FT[j,i].Q then
            EnOutlets[i] := 1;
         end_if;
     end_for;
   end_for;


   for j := 1 to NumOfHMIsMajles do
     for i := 1 to NumOfCurtainMajles do

         enCurtainsUP_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);

         enCurtainsUP_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);

         if enCurtainsUP_RT[j,i].Q or enCurtainsUP_FT[j,i].Q then
            EnCurtainsUp[i] := 1;
         end_if;


         enCurtainsDW_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);

         enCurtainsDW_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);

         if enCurtainsDW_RT[j,i].Q or enCurtainsDW_FT[j,i].Q then
            EnCurtainsDw[i] := 1;
         end_if;

     end_for;
   end_for;
   
   for j := 1 to NumOfHMIsMajles do
     for i := 1 to NumOfCurtainMajles do

         enCurtainsUP_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);

         enCurtainsUP_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].UP.0);

         enCurtainsDW_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);

         enCurtainsDW_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enShutters[i].Dw.0);

         //
         enCurtainsUP_SW_RT[i](CLK := controlRoom.SwitchUPStatus[i]);
         enCurtainsUP_SW_FT[i](CLK := controlRoom.SwitchUPStatus[i]);

         enCurtainsDW_SW_RT[i](CLK := controlRoom.SwitchDWStatus[i]);
         enCurtainsDW_SW_FT[i](CLK := controlRoom.SwitchDWStatus[i]);

         if  enCurtainsUP_RT[j,i].Q  or enCurtainsUP_FT[j,i].Q then
             enCurtainsUP_GUI[i] := 1;
         end_if;

         if  enCurtainsDW_RT[j,i].Q  or enCurtainsDW_FT[j,i].Q then
             enCurtainsDW_GUI[i] := 1;
         end_if;

         // if up button is pressed and the curtain is not moving up

         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outUP then
             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 1;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;

             enCurtainsUP_GUI[i] := 0;
         end_if;

         // if up button is pressed and the curtain is moving up

         if (enCurtainsUP_GUI[i] or enCurtainsUP_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outUP then
             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;

             enCurtainsUP_GUI[i] := 0;
         end_if;


          // if down button is pressed and the curtain is not moving down

         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_RT[i].Q) and not curtainsStatus[CurtStatus_Index - 1 + i].outDW then
             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 1;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 0;

             enCurtainsDW_GUI[i] := 0;
         end_if;

         // if down button is pressed and the curtain is moving down

         if (enCurtainsDW_GUI[i] or enCurtainsDW_SW_FT[i].Q) and curtainsStatus[CurtStatus_Index - 1 + i].outDW then
             PLC1_EnCurtains[CurtEn_Index - 1 + i].UP   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].DW   := 0;
             PLC1_EnCurtains[CurtEn_Index - 1 + i].STOP := 1;

             enCurtainsDW_GUI[i] := 0;
         end_if;

     end_for;
   end_for;

   for j := 1 to NumOfHMIsMajles do
      for i := 1 to NumOfFCUsMajles do
          enFCUs_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);
          enFCUs_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].onOff);

          if enFCUs_FT[j,i].Q then
             enableFCU[i] := 0;
          end_if;
          if enFCUs_RT[j,i].Q then
             enableFCU[i] := 1;
          end_if;

          enFanAuto_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed = 8));
          enFanLow_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.0);
          enFanMed_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.1);
          enFanHigh_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].fanSpeed.2);

          if enFanAuto_RT[j,i].Q then
             settingsFCU[i].FCU_FanSpeed := auto;
          end_if;
          if enFanLow_RT[j,i].Q then
             settingsFCU[i].FCU_FanSpeed := low;
          end_if;
          if enFanMed_RT[j,i].Q then
             settingsFCU[i].FCU_FanSpeed := med;
          end_if;
          if enFanHigh_RT[j,i].Q then
             settingsFCU[i].FCU_FanSpeed := high;
          end_if;

          enFCUCool_RT[j,i](CLK := (HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode = 0));
          enFCUFanOnly_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].mode.0);

          if enFCUCool_RT[j,i].Q then
             settingsFCU[i].FCU_Mode := cooling;
          end_if;
          if enFCUFanOnly_RT[j,i].Q then
             settingsFCU[i].FCU_Mode := fanOnly;
          end_if;

          enSetTempIncr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);
          enSetTempIncr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.0);

          if enSetTempIncr_RT[j,i].Q or enSetTempIncr_FT[j,i].Q then
             setTempFCU_Majles[j] := setTempFCU_Majles[j] + 0.5;
          end_if;

          enSetTempDecr_RT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);
          enSetTempDecr_FT[j,i](CLK := HMIs_DataRead[HMI_Index + j - 1].enFCUs[i].SetTempCtrl.1);

          if enSetTempDecr_RT[j,i].Q or enSetTempDecr_FT[j,i].Q then
             setTempFCU_Majles[j] := setTempFCU_Majles[j] - 0.5;
          end_if;

      end_for;
   end_for;

END_PROGRAM


